[["index.html", "Epiregulon documentation Introduction", " Epiregulon documentation Xiaosai Yao, Tomasz Włodarczyk 2024-02-23 Introduction Gene regulatory networks model the underlying gene regulation hierarchies that drive gene expression and cell states. The main function of the epiregulon package is to construct gene regulatory networks and infer transcription factor (TF) activity in single cells by integration of scATAC-seq and scRNA-seq data and incorporation of public bulk TF ChIP-seq data. Epiregulon assigns regulatory elements (REs) to their putative target genes (TGs) if the chromatin accessibility and gene expressions are highly correlated across cell clusters. Each regulatory element is then interrogated for TF occupancy based on a compilation of public TF ChIP-seq binding sites from ChIP-Atlas and ENCODE TF ChIP-seq data. This maps out the preliminary TF-RE-TG regulatory relationships. Further pruning of the gene regulatory network is necessary to remove spurious gene regulatory relationships not supported by the data, especially because the public ChIP-seq data was most certainly obtained in different cell lines or treatment conditions. In this case, we want to identify the most likely TF-RE-TG triplets. Here we apply tests of independence (binomial or chi-square tests) which identify TF-RE-TG triplets jointly occurring at probabilities deviating from the expected probabilities if these three events occur independently. In other words, we assume that a TF-RE-TG regulatory relationship holds true if expression of the TG, chromatin accessibility at RE and expression of the TG tend to co-exist in the same cells. While we recognize that there could be time delays between chromatin accessibility and the expression of target genes in true RE-TG relationships, we want to be conservative in our inference and rule out unsubstantiated TF-RE-TG relationships. After network pruning, we would like to further estimate the strength of regulation. This can be achieved using one of the three methods: 1) correlation between TG and TF or between TG and the product of TF and RE, 2) mutual information between TG and TF expression or between TG and the product of TF and RE, and 3) effect size of the Wilcoxon test between target gene expression in cells jointly expressing all 3 elements vs cells that do not. The activity of transcription factor is the weighted sum of all its target genes in which the weights correspond to the strength of regulation. The target genes of TFs can be queried against known pathways to predict the functions of TFs. We can also perform differential TF activity using two approaches: 1) differential total activity or 2) differential network topology. The first approach compares differences in the sum of the target genes. The second approach involves edge subtraction between two networks and the TFs are ranked by the degree centrality of the differential graphs. Epiregulon also allows identification of interaction partners by the degree of overlaps in the target genes between two TFs. Current prerequisites for running epiregulon include pre-computed peak matrix, gene expression matrix and dimensionality reduction. Epiregulon offers seamless integration with ArchR. Alternately, users can analyze their data using their favorite analysis tools and package their matrices into MultiAssayExperiment (See scMultiome package). The scATAC-seq experiment can be either paired or unpaired with the scRNA-seq dataset as long as they were already integrated. The final output of epiregulon is a matrix of TF activities where rows are individual TFs and columns are single cell indexes. "],["installation.html", "1 Installation", " 1 Installation All the epiregulon components are available on github. There are three separate epiregulon packages. The core epiregulon package supports input in the form of SingleCellExperiment objects. If the users would like to start from ArchR projects, they may choose to use epiregulon.archr package, which allows for the seamless integration with ArchR package through accepting its output to be used in the downstream workflow. # install devtools if(!require(devtools)) install.packages(&quot;devtools&quot;) # install basic epiregulon package devtools::install_github(repo=&#39;xiaosaiyao/epiregulon&#39;) # install extended version of epiregulon devtools::install_github(repo=&#39;xiaosaiyao/epiregulon.archr&#39;) Moreover, we provide a suite of tools for the enrichment analysis, visualization, and network analysis which can be run on the epireglon or epiregulon.archr output. # install extended version of epiregulon devtools::install_github(repo=&#39;xiaosaiyao/epiregulon.extra&#39;) "],["basic-workflow-with-multiassayexperiment.html", "2 Basic workflow with MultiAssayExperiment 2.1 Data preparation 2.2 Retrieve bulk TF ChIP-seq binding sites 2.3 Link ATAC-seq peaks to target genes 2.4 Add TF motif binding to peaks 2.5 Generate regulons 2.6 Network pruning (highly recommended) 2.7 Add Weights 2.8 (Optional) Annotate with TF motifs 2.9 Calculate TF activity 2.10 Perform differential activity 2.11 Visualize the results 2.12 Geneset enrichment 2.13 Network analysis 2.14 Session Info", " 2 Basic workflow with MultiAssayExperiment In this chapter, we illustrate the epiregulon workflow starting from data in the form of SingleCellExperiment objects using the correlation weight estimation method. This is a dataset generated by infecting LNCaP cells with NKX2-1, GATA6 and FOXA2 to examine the effects of these TFs on AR activity using a technique called reprogram-seq. 2.1 Data preparation Single cell preprocessing needs to performed by user’s favorite methods prior to using Epiregulon. The following components are required: 1. Peak matrix from scATAC-seq 2. Gene expression matrix from either paired or unpaired scRNA-seq. RNA-seq integration needs to be performed for unpaired dataset. 3. Dimensionality reduction matrix from with either single modalities or joint scRNA-seq and scATAC-seq In this case, we have preprocessed the data and converted the archR project into a MAE object using the function epiregulon.archr::archr2MAE and made the data available through the scMultiome package # load the MAE object library(scMultiome) mae &lt;- scMultiome::reprogramSeq() # peak matrix PeakMatrix &lt;- mae[[&quot;PeakMatrix&quot;]] # expression matrix GeneExpressionMatrix &lt;- mae[[&quot;GeneExpressionMatrix&quot;]] rownames(GeneExpressionMatrix) &lt;- rowData(GeneExpressionMatrix)$name # dimensional reduction matrix reducedDimMatrix &lt;- reducedDim(mae[[&#39;TileMatrix500&#39;]], &quot;LSI_ATAC&quot;) Visualize the SingleCellExperiment by UMAP # transfer UMAP_combined from TileMatrix to GeneExpressionMatrix reducedDim(GeneExpressionMatrix, &quot;UMAP_Combined&quot;) &lt;- reducedDim(mae[[&#39;TileMatrix500&#39;]], &quot;UMAP_Combined&quot;) scater::plotReducedDim(GeneExpressionMatrix, dimred = &quot;UMAP_Combined&quot;, text_by = &quot;Clusters&quot;, colour_by = &quot;Clusters&quot;) 2.2 Retrieve bulk TF ChIP-seq binding sites First, we retrieve the information of TF binding sites collected from Cistrome and ENCODE ChIP-seq, which are available through the scMultiome package . Currently, human genomes hg19 and hg38 and mouse mm10 are available. library(epiregulon) grl &lt;- getTFMotifInfo(genome = &quot;hg38&quot;) ## snapshotDate(): 2024-02-22 ## see ?scMultiome and browseVignettes(&#39;scMultiome&#39;) for documentation ## loading from cache grl ## GRangesList object of length 1558: ## $`5-hmC` ## GRanges object with 24048 ranges and 0 metadata columns: ## seqnames ranges strand ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; ## [1] chr1 10000-10685 * ## [2] chr1 13362-13694 * ## [3] chr1 29631-29989 * ## [4] chr1 40454-40754 * ## [5] chr1 135395-135871 * ## ... ... ... ... ## [24044] chrY 56864377-56864627 * ## [24045] chrY 56876124-56876182 * ## [24046] chrM 84-2450 * ## [24047] chrM 13613-14955 * ## [24048] chrM 15134-16490 * ## ------- ## seqinfo: 25 sequences from an unspecified genome; no seqlengths ## ## ... ## &lt;1557 more elements&gt; 2.3 Link ATAC-seq peaks to target genes Next, we compute peak to gene correlations using a custom algorithm that has similar performance to ArchR’s P2G function. set.seed(1010) p2g &lt;- calculateP2G(peakMatrix = PeakMatrix, expMatrix = GeneExpressionMatrix, reducedDim = reducedDimMatrix, exp_assay = &quot;normalizedCounts&quot;) ## Using epiregulon to compute peak to gene links... ## performing k means clustering to form metacells ## Computing correlation p2g ## DataFrame with 25693 rows and 8 columns ## idxATAC chr start end idxRNA target Correlation distance ## &lt;integer&gt; &lt;character&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; &lt;array&gt; &lt;matrix&gt; &lt;integer&gt; ## 1 1 chr1 817121 817621 19 FAM41C 0.505457 50578 ## 2 6 chr1 869650 870150 14 AL669831.2 0.614009 108540 ## 3 10 chr1 920987 921487 19 FAM41C 0.662441 50587 ## 4 22 chr1 960317 960817 19 FAM41C 0.635411 89917 ## 5 22 chr1 960317 960817 28 PERM1 0.614227 18210 ## ... ... ... ... ... ... ... ... ... ## 25689 126586 chrX 155071227 155071727 36422 MTCP1 0.504839 0 ## 25690 126590 chrX 155228844 155229344 36426 CLIC2 0.830640 103268 ## 25691 126592 chrX 155334445 155334945 36426 CLIC2 0.529991 0 ## 25692 126596 chrX 155820104 155820604 36436 VAMP7 0.629908 58739 ## 25693 126599 chrX 155897986 155898486 36436 VAMP7 0.505036 16442 2.4 Add TF motif binding to peaks The next step is to add the TF binding information by overlapping regions of the peak matrix with the bulk chip-seq database loaded in 2. The user can supply either an archR project path and this function will retrieve the peak matrix, or a peakMatrix in the form of a Granges object or RangedSummarizedExperiment. overlap &lt;- addTFMotifInfo(grl = grl, p2g = p2g, peakMatrix = PeakMatrix) ## Computing overlap... ## Success! head(overlap) ## idxATAC idxTF tf ## 1 1 2 5-mC ## 2 1 22 AML1-ETO ## 3 1 25 AR ## 4 1 49 ATF1 ## 5 1 50 ATF2 ## 6 1 51 ATF3 2.5 Generate regulons A long format data frame, representing the inferred regulons, is then generated. The data frame consists of three important columns: tf (transcription factor) target gene peak to gene correlation between tf and target gene regulon &lt;- getRegulon(p2g = p2g, overlap = overlap, aggregate = FALSE) regulon ## DataFrame with 3187407 rows and 10 columns ## idxATAC chr start end idxRNA target distance idxTF tf corr ## &lt;integer&gt; &lt;character&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; &lt;character&gt; &lt;integer&gt; &lt;integer&gt; &lt;character&gt; &lt;matrix&gt; ## 1 1 chr1 817121 817621 19 FAM41C 50578 2 5-mC 0.505457 ## 2 1 chr1 817121 817621 19 FAM41C 50578 22 AML1-ETO 0.505457 ## 3 1 chr1 817121 817621 19 FAM41C 50578 25 AR 0.505457 ## 4 1 chr1 817121 817621 19 FAM41C 50578 49 ATF1 0.505457 ## 5 1 chr1 817121 817621 19 FAM41C 50578 50 ATF2 0.505457 ## ... ... ... ... ... ... ... ... ... ... ... ## 3187403 126599 chrX 155897986 155898486 36436 VAMP7 16442 436 HOXB13 0.505036 ## 3187404 126599 chrX 155897986 155898486 36436 VAMP7 16442 669 NANOG 0.505036 ## 3187405 126599 chrX 155897986 155898486 36436 VAMP7 16442 762 ONECUT2 0.505036 ## 3187406 126599 chrX 155897986 155898486 36436 VAMP7 16442 1044 SUMO2 0.505036 ## 3187407 126599 chrX 155897986 155898486 36436 VAMP7 16442 1116 TLE3 0.505036 2.6 Network pruning (highly recommended) Epiregulon prunes the network by performing tests of independence on the observed number of cells jointly expressing transcription factor (TF), regulatory element (RE) and target gene (TG) vs the expected number of cells if TF/RE and TG are independently expressed. We implement two tests, the binomial test and the chi-square test. In the binomial test, the expected probability is P(TF, RE) * P(TG), and the number of trials is the total number of cells, and the observed successes is the number of cells jointly expressing all three elements. In the chi-square test, the expected probability for having all 3 elements active is also P(TF, RE) * P(TG) and the probability otherwise is 1- P(TF, RE) * P(TG). The observed cell count for the active category is the number of cells jointly expressing all three elements, and the cell count for the inactive category is n - n_triple. We calculate cluster-specific p-values if users supply cluster labels. This is useful if we are interested in cluster-specific networks. The pruned regulons can then be used to visualize differential networks for transcription factors of interest. See section on differential networks. If you supply your cluster label make sure that the gene expression SingleCellExperiment contains matrix representing reduced dimension coordinates for cells. The name of this matrix should be passed in useDim parameter. It is also necessary if you want cells to be aggregated into pseudobulks, which can be done by specifying aggregateCells=TRUE. pruned.regulon &lt;- pruneRegulon(expMatrix = GeneExpressionMatrix, exp_assay = &quot;normalizedCounts&quot;, peakMatrix = PeakMatrix, peak_assay = &quot;counts&quot;, test = &quot;chi.sq&quot;, regulon, clusters = GeneExpressionMatrix$Clusters, prune_value = &quot;pval&quot;, regulon_cutoff = 0.05 ) ## pruning network with chi.sq tests using a regulon cutoff of pval&lt;0.05 ## pruning regulons pruned.regulon ## DataFrame with 522788 rows and 13 columns ## idxATAC chr start end idxRNA target distance idxTF tf corr ## &lt;integer&gt; &lt;character&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; &lt;character&gt; &lt;integer&gt; &lt;integer&gt; &lt;character&gt; &lt;matrix&gt; ## 1 22 chr1 960317 960817 28 PERM1 18210 5 ADNP 0.614227 ## 2 56 chr1 1124416 1124916 40 AL390719.2 42439 5 ADNP 0.582570 ## 3 122 chr1 1375717 1376217 61 CCNL2 12724 5 ADNP 0.616679 ## 4 631 chr1 7961380 7961880 210 AL034417.4 27252 5 ADNP 0.552592 ## 5 655 chr1 8061169 8061669 208 TNFRSF9 120104 5 ADNP 0.780316 ## ... ... ... ... ... ... ... ... ... ... ... ## 522784 123295 chr9 127937015 127937515 34999 ENG 89649 1557 ZXDC 0.719295 ## 522785 123404 chr9 128829592 128830092 35051 NUP188 115605 1557 ZXDC 0.590378 ## 522786 123437 chr9 129110677 129111177 35062 AL158151.3 62628 1557 ZXDC 0.636463 ## 522787 124017 chr9 136847262 136847762 35226 TMEM141 55719 1557 ZXDC 0.575078 ## 522788 125706 chrX 107206372 107206872 36012 NUP62CL 0 1557 ZXDC 0.608867 ## pval stats qval ## &lt;matrix&gt; &lt;matrix&gt; &lt;matrix&gt; ## 1 0.106264786:0.8357430:1:... 2.60891:0.04299061:0:... 1:1:1:... ## 2 0.130376176:0.9242106:1:... 2.28802:0.00904996:0:... 1:1:1:... ## 3 0.189979998:0.0242908:1:... 1.71777:5.07374677:0:... 1:1:1:... ## 4 0.112531104:0.4154439:1:... 2.51831:0.66316759:0:... 1:1:1:... ## 5 0.000579039:0.1049407:1:... 11.84218:2.62880407:0:... 1:1:1:... ## ... ... ... ... ## 522784 5.28805e-04:0.9463687:1:... 12.01125:0.00452493:0:... 1:1:1:... ## 522785 8.86947e-03:0.0386721:1:... 6.84892:4.27521247:0:... 1:1:1:... ## 522786 3.89737e-06:0.8587396:1:... 21.31467:0.03167648:0:... 1:1:1:... ## 522787 4.78049e-02:0.2373499:1:... 3.91683:1.39626547:0:... 1:1:1:... ## 522788 1.65029e-01:0.8157342:1:... 1.92753:0.05430531:0:... 1:1:1:... 2.7 Add Weights While the `pruneRegulon’ function provides statistics on the joint occurrence of TF-RE-TG, we would like to further estimate the strength of regulation. Biologically, this can be interpreted as the magnitude of gene expression changes induced by transcription factor activity. Epiregulon estimates the regulatory potential using one of the three measures: 1) correlation between TG and TF or between TG and the product of TF and RE, 2) mutual information between TG and TF expression or between TG and the product of TF and RE, or 3) Wilcoxon test statistics of target gene expression in cells jointly expressing all 3 elements vs cells that do not. Two measures (correlation and Wilcoxon) give both the magnitude and directionality of changes whereas mutational information is always positive. The correlation and mutual information statistics are computed on grouped pseudobulks by user-supplied cluster labels and yield a single weight across all clusters per each TF-RE-target triplet. In contrast, the Wilcoxon method group cells based on the joint expression of TF, RE and TG in each single cell or in cell aggregates. If cell labels are provided, we calculate cluster-specific weights in addition to estimating weights from all the cells. Cell aggregation uses a default value of 10 cells and can help overcome sparsity and speed up computation. If cluster labels are provided, we can obtain weights of individual clusters and all cells combined. In this example, we apply Wilcoxon test on cell aggregates of 10 cells. In this example, we illustrate weight estimation using the correlation method. We chose correlation as the weight estimation because we reasoned that the increase in TF activity is driven by the overexpression of the TF, and thus its target genes should see a corresponding change in their expression. When tf_re.merge is set to TRUE, we compute weight based on the correlation between TG gene expression and the product of the TF gene expression and RE chromatin accessibility. If tf_re.merge is set to FALSE, we do not take into account the RE chromatin accessibility and the correlation is computed only based on the correlation between TG gene expression and TF gene expression. Here, we set tf_re.merge to TRUE because we are interested in target genes whose gene expression and chromatin accessibility at the regulatory elements change concordantly with the expression of their putative transcription factors. regulon.w &lt;- addWeights(regulon = pruned.regulon, expMatrix = GeneExpressionMatrix, exp_assay = &quot;normalizedCounts&quot;, peakMatrix = PeakMatrix, peak_assay = &quot;counts&quot;, clusters = GeneExpressionMatrix$Clusters, block_factor = NULL, tf_re.merge = TRUE, method = &quot;corr&quot;) regulon.w 2.8 (Optional) Annotate with TF motifs So far the gene regulatory network was constructed from TF ChIP-seq exclusively. Some users would prefer to further annotate the regulatory elements with the presence of motifs. We provide an option to annotate peaks with motifs from the Cisbp database. If motifs are available for a factor and the RE contains a motif, we return 1. If motifs are available and the RE does not contain a motif, we return 0. If no motifs are known for this particular factor (as in the case of co-factors or chromatin modifiers), we return NA. In this example, while we illustrate the possibility of annotating regulons with motifs, we contain the remaining workflow with the full regulons regulon.w. It is important to note that filtering for the presence of motifs removes a large fraction of the target genes because motifs are often present in a small subset of the ChIP-seq peaks (can be as low as 10%). Second, indirect TF binding, possibly through its interaction partners, may have a true biological function. However, if the user would prefer to retain only target genes with REs containing the motif of the TFs, they should proceed with regulon.w.motif. regulon.w.motif &lt;- addMotifScore(regulon = regulon.w, peaks = rowRanges(PeakMatrix), species = &quot;human&quot;, genome = &quot;hg38&quot;) ## annotating peaks with motifs ## snapshotDate(): 2024-02-22 ## see ?scMultiome and browseVignettes(&#39;scMultiome&#39;) for documentation ## loading from cache ## ## ## Attaching package: &#39;Biostrings&#39; ## The following object is masked from &#39;package:base&#39;: ## ## strsplit ## ## Attaching package: &#39;rtracklayer&#39; ## The following object is masked from &#39;package:BiocIO&#39;: ## ## FileForFormat ## The following object is masked from &#39;package:AnnotationHub&#39;: ## ## hubUrl # if desired, set weight to 0 if no motif is found regulon.w.motif$weight[regulon.w.motif$motif == 0] &lt;- 0 2.9 Calculate TF activity Finally, the activities for a specific TF in each cell are computed by averaging expressions of target genes linked to the TF weighted by the test statistics of choice, chosen from either correlation, mutual information or Wilcoxon test statistics. \\[y=\\frac{1}{n}\\sum_{i=1}^{n} x_i * weights_i\\] where \\(y\\) is the activity of a TF for a cell \\(n\\) is the total number of targets for a TF \\(x_i\\) is the log count expression of target i where i in {1,2,…,n} \\(weights_i\\) is the weight of TF and target i score.combine &lt;- calculateActivity(expMatrix = GeneExpressionMatrix, regulon = regulon.w, mode = &quot;weight&quot;, method = &quot;weightedMean&quot;, exp_assay = &quot;normalizedCounts&quot;, normalize = FALSE) ## calculating TF activity from regulon using weightedmean ## aggregating regulons... ## creating weight matrix... ## calculating activity scores... ## normalize by the number of targets... 2.10 Perform differential activity library(epiregulon.extra) markers &lt;- findDifferentialActivity(activity_matrix = score.combine, groups = GeneExpressionMatrix$hash_assignment, pval.type = &quot;some&quot;, direction = &quot;up&quot;, test.type = &quot;t&quot;) ## Warning: The `groups` argument of `findDifferentialActivity()` is deprecated as of epiregulon.extra 0.99.0. ## ℹ Please use the `clusters` argument instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. Take the top TFs markers.sig &lt;- getSigGenes(markers, topgenes = 5 ) ## Using a logFC cutoff of 0 for class HTO1_FOXA2_v2 ## Using a logFC cutoff of 0.2 for class HTO10_GATA6_UTR ## Using a logFC cutoff of 0.2 for class HTO2_GATA6_v2 ## Using a logFC cutoff of 0 for class HTO3_NKX2.1_v2 ## Using a logFC cutoff of 0 for class HTO4_mFOXA1_v2 ## Using a logFC cutoff of 0 for class HTO5_NeonG_v2 ## Using a logFC cutoff of 0 for class HTO6_hFOXA1_UTR ## Using a logFC cutoff of 0 for class HTO8_NKX2.1_UTR 2.11 Visualize the results First visualize the known differential TFs by bubble plot plotBubble(activity_matrix = score.combine, tf = c(&quot;NKX2-1&quot;,&quot;GATA6&quot;,&quot;FOXA1&quot;,&quot;FOXA2&quot;, &quot;AR&quot;), clusters = GeneExpressionMatrix$hash_assignment) Then visualize the most differential TFs by clusters plotBubble(activity_matrix = score.combine, tf = markers.sig$tf, clusters = GeneExpressionMatrix$hash_assignment) Visualize the known differential TFs by violin plot. plotActivityViolin(activity_matrix = score.combine, tf = c(&quot;NKX2-1&quot;,&quot;GATA6&quot;,&quot;FOXA1&quot;,&quot;FOXA2&quot;, &quot;AR&quot;), clusters = GeneExpressionMatrix$hash_assignment) Visualize the known differential TFs by UMAP plotActivityDim(sce = GeneExpressionMatrix, activity_matrix = score.combine, tf = c(&quot;NKX2-1&quot;,&quot;GATA6&quot;,&quot;FOXA1&quot;,&quot;FOXA2&quot;, &quot;AR&quot;), dimtype = &quot;UMAP_Combined&quot;, label = &quot;Clusters&quot;, point_size = 1, ncol = 3) In contrast, the gene expression of the TFs is very sparse plotActivityDim(sce = GeneExpressionMatrix, activity_matrix = counts(GeneExpressionMatrix), tf = c(&quot;NKX2-1&quot;,&quot;GATA6&quot;,&quot;FOXA1&quot;,&quot;FOXA2&quot;, &quot;AR&quot;), dimtype = &quot;UMAP_Combined&quot;, label = &quot;Clusters&quot;, point_size = 1, ncol = 3, limit = c(0,2), colors = c(&quot;grey&quot;,&quot;blue&quot;), legend.label = &quot;GEX&quot;) Visualize the gene expression of the regulons by heatmap plotHeatmapRegulon(sce=GeneExpressionMatrix, tfs=c(&quot;GATA6&quot;,&quot;NKX2-1&quot;), regulon=regulon.w, regulon_cutoff=0.1, downsample=1000, cell_attributes=&quot;Clusters&quot;, col_gap=&quot;Clusters&quot;, exprs_values=&quot;counts&quot;, name=&quot;regulon heatmap&quot;) plotHeatmapActivity(activity=score.combine, sce=GeneExpressionMatrix, tfs=rownames(score.combine), downsample=5000, cell_attributes=&quot;Clusters&quot;, col_gap=&quot;Clusters&quot;, name = &quot;Activity&quot;) 2.12 Geneset enrichment Sometimes we are interested to know what pathways are enriched in the regulon of a particular TF. We can perform geneset enrichment using the enricher function from clusterProfiler. #retrieve genesets H &lt;- EnrichmentBrowser::getGenesets(org = &quot;hsa&quot;, db = &quot;msigdb&quot;, cat = &quot;H&quot;, gene.id.type = &quot;SYMBOL&quot; ) C2 &lt;- EnrichmentBrowser::getGenesets(org = &quot;hsa&quot;, db = &quot;msigdb&quot;, cat = &quot;C2&quot;, gene.id.type = &quot;SYMBOL&quot; ) C6 &lt;- EnrichmentBrowser::getGenesets(org = &quot;hsa&quot;, db = &quot;msigdb&quot;, cat = &quot;C6&quot;, gene.id.type = &quot;SYMBOL&quot; ) #combine genesets and convert genesets to be compatible with enricher gs &lt;- c(H, C2, C6) gs.list &lt;- do.call(rbind,lapply(names(gs), function(x) {data.frame(gs=x, genes=gs[[x]])})) enrichresults &lt;- regulonEnrich(TF = c(&quot;GATA6&quot;,&quot;NKX2-1&quot;), regulon = regulon.w, weight = &quot;weight&quot;, weight_cutoff = 0, genesets = gs.list) ## GATA6 ## NKX2-1 #plot results enrichPlot(results = enrichresults ) 2.13 Network analysis We can visualize the genesets as a network plotGseaNetwork(tf = names(enrichresults), enrichresults = enrichresults, p.adj_cutoff = 0.1, ntop_pathways = 10) 2.14 Session Info sessionInfo() ## R Under development (unstable) (2023-12-04 r85659) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 18.04.6 LTS ## ## Matrix products: default ## BLAS: /usr/local/lib/R/lib/libRblas.so ## LAPACK: /usr/local/lib/R/lib/libRlapack.so; LAPACK version 3.11.0 ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## time zone: Etc/UTC ## tzcode source: system (glibc) ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] org.Hs.eg.db_3.18.0 AnnotationDbi_1.65.2 msigdbr_7.5.1 ## [4] epiregulon.extra_0.99.1 BSgenome.Hsapiens.UCSC.hg38_1.4.5 BSgenome_1.71.2 ## [7] rtracklayer_1.63.0 BiocIO_1.13.0 Biostrings_2.71.2 ## [10] XVector_0.43.1 epiregulon_0.99.2 scMultiome_1.3.0 ## [13] SingleCellExperiment_1.25.0 MultiAssayExperiment_1.29.1 SummarizedExperiment_1.33.3 ## [16] Biobase_2.63.0 GenomicRanges_1.55.3 GenomeInfoDb_1.39.6 ## [19] IRanges_2.37.1 S4Vectors_0.41.3 MatrixGenerics_1.15.0 ## [22] matrixStats_1.2.0 ExperimentHub_2.11.1 AnnotationHub_3.11.1 ## [25] BiocFileCache_2.11.1 dbplyr_2.4.0 BiocGenerics_0.49.1 ## ## loaded via a namespace (and not attached): ## [1] fs_1.6.3 bitops_1.0-7 enrichplot_1.23.1 DirichletMultinomial_1.45.0 ## [5] TFBSTools_1.41.0 HDO.db_0.99.1 httr_1.4.7 RColorBrewer_1.1-3 ## [9] doParallel_1.0.17 Rgraphviz_2.47.0 tools_4.4.0 backports_1.4.1 ## [13] utf8_1.2.4 R6_2.5.1 HDF5Array_1.31.5 lazyeval_0.2.2 ## [17] rhdf5filters_1.15.2 GetoptLong_1.0.5 withr_3.0.0 gridExtra_2.3 ## [21] cli_3.6.2 Cairo_1.6-2 scatterpie_0.2.1 labeling_0.4.3 ## [25] sass_0.4.8 KEGGgraph_1.63.0 readr_2.1.5 Rsamtools_2.19.3 ## [29] yulab.utils_0.1.4 gson_0.1.0 DOSE_3.29.2 R.utils_2.12.3 ## [33] scater_1.31.2 limma_3.59.3 rstudioapi_0.15.0 RSQLite_2.3.5 ## [37] gridGraphics_0.5-1 generics_0.1.3 shape_1.4.6 gtools_3.9.5 ## [41] dplyr_1.1.4 GO.db_3.18.0 Matrix_1.6-4 ggbeeswarm_0.7.2 ## [45] fansi_1.0.6 abind_1.4-5 R.methodsS3_1.8.2 lifecycle_1.0.4 ## [49] yaml_2.3.8 edgeR_4.1.17 qvalue_2.35.0 rhdf5_2.47.4 ## [53] SparseArray_1.3.4 grid_4.4.0 blob_1.2.4 dqrng_0.3.2 ## [57] crayon_1.5.2 lattice_0.22-5 beachmat_2.19.1 cowplot_1.1.3 ## [61] annotate_1.81.2 KEGGREST_1.43.0 magick_2.8.3 pillar_1.9.0 ## [65] knitr_1.45 ComplexHeatmap_2.19.0 metapod_1.11.1 fgsea_1.29.0 ## [69] rjson_0.2.21 codetools_0.2-19 fastmatch_1.1-4 glue_1.7.0 ## [73] ggfun_0.1.4 data.table_1.15.0 treeio_1.27.0 vctrs_0.6.5 ## [77] png_0.1-8 gtable_0.3.4 poweRlaw_0.80.0 cachem_1.0.8 ## [81] xfun_0.42 S4Arrays_1.3.3 mime_0.12 tidygraph_1.3.1 ## [85] pracma_2.4.4 iterators_1.0.14 statmod_1.5.0 bluster_1.13.0 ## [89] nlme_3.1-164 ggtree_3.11.0 bit64_4.0.5 filelock_1.0.3 ## [93] bslib_0.6.1 irlba_2.3.5.1 vipor_0.4.7 colorspace_2.1-0 ## [97] seqLogo_1.69.0 DBI_1.2.2 tidyselect_1.2.0 bit_4.0.5 ## [101] compiler_4.4.0 curl_5.2.0 graph_1.81.0 BiocNeighbors_1.21.2 ## [105] DelayedArray_0.29.4 shadowtext_0.1.3 bookdown_0.37 checkmate_2.3.1 ## [109] scales_1.3.0 caTools_1.18.2 rappdirs_0.3.3 stringr_1.5.1 ## [113] digest_0.6.34 motifmatchr_1.25.0 rmarkdown_2.25 htmltools_0.5.7 ## [117] pkgconfig_2.0.3 sparseMatrixStats_1.15.0 highr_0.10 fastmap_1.1.1 ## [121] rlang_1.1.3 GlobalOptions_0.1.2 DelayedMatrixStats_1.25.1 farver_2.1.1 ## [125] jquerylib_0.1.4 jsonlite_1.8.8 BiocParallel_1.37.0 GOSemSim_2.29.1 ## [129] R.oo_1.26.0 BiocSingular_1.19.0 RCurl_1.98-1.14 magrittr_2.0.3 ## [133] ggplotify_0.1.2 scuttle_1.13.0 GenomeInfoDbData_1.2.11 patchwork_1.2.0 ## [137] Rhdf5lib_1.25.1 munsell_0.5.0 Rcpp_1.0.12 ape_5.7-1 ## [141] babelgene_22.9 viridis_0.6.5 EnrichmentBrowser_2.33.1 stringi_1.8.3 ## [145] ggraph_2.1.0 MASS_7.3-60.1 zlibbioc_1.49.0 plyr_1.8.9 ## [149] parallel_4.4.0 ggrepel_0.9.5 CNEr_1.39.0 graphlayouts_1.1.0 ## [153] splines_4.4.0 hms_1.1.3 circlize_0.4.16 locfit_1.5-9.8 ## [157] igraph_2.0.2 reshape2_1.4.4 ScaledMatrix_1.11.0 TFMPvalue_0.0.9 ## [161] BiocVersion_3.19.1 XML_3.99-0.16.1 evaluate_0.23 scran_1.31.0 ## [165] BiocManager_1.30.22 tweenr_2.0.2 tzdb_0.4.0 foreach_1.5.2 ## [169] polyclip_1.10-6 tidyr_1.3.1 purrr_1.0.2 clue_0.3-65 ## [173] ggplot2_3.4.4 ggforce_0.4.2 rsvd_1.0.5 xtable_1.8-4 ## [177] restfulr_0.0.15 tidytree_0.4.6 viridisLite_0.4.2 tibble_3.2.1 ## [181] aplot_0.2.2 clusterProfiler_4.11.0 memoise_2.0.1 beeswarm_0.4.0 ## [185] GenomicAlignments_1.39.4 cluster_2.1.6 GSEABase_1.65.1 BiocStyle_2.31.0 "],["advanced-workflow-with-multiassayexperiment.html", "3 Advanced workflow with MultiAssayExperiment 3.1 Data preparation 3.2 Retrieve bulk TF ChIP-seq binding sites 3.3 Link ATACseq peaks to target genes 3.4 Add TF motif binding to peaks 3.5 Generate regulons 3.6 Prune network 3.7 Add Weights 3.8 Calculate TF activity 3.9 Differential TF activity test 3.10 Visualizing TF activities 3.11 Geneset enrichment 3.12 Differential Network analysis 3.13 Session Info", " 3 Advanced workflow with MultiAssayExperiment In this chapter, we illustrate the epiregulon workflow starting from data in the form of SingleCellExperiment objects using the Wilcoxon weight estimation method. This is a dataset of hematopoiesis from the ArchR tutorial. Prior to using epiregulon, this dataset has been fully preprocessed in ArchR, and converted to a MultiAssayExperiment using epireglon.archr::archr2MAE. The MAE object was uploaded to scMultiome for full reproducibility. In this dataset, scRNAseq and scATACseq were unpaired and integrated by the ArchR::addGeneIntegrationMatrix function. 3.1 Data preparation Download the example dataset from scMultiome package mae &lt;- scMultiome::hematopoiesis() # Load peak matrix PeakMatrix &lt;- mae[[&quot;PeakMatrix&quot;]] # Load expression matrix GeneExpressionMatrix &lt;- mae[[&quot;GeneIntegrationMatrix&quot;]] # Add gene symbols to rownames rownames(GeneExpressionMatrix) &lt;- rowData(GeneExpressionMatrix)$name # Transfer dimensionality reduction matrix to GeneExpression reducedDim(GeneExpressionMatrix, &quot;IterativeLSI&quot;) &lt;- reducedDim(mae[[&#39;TileMatrix500&#39;]], &quot;IterativeLSI&quot;) reducedDim(GeneExpressionMatrix, &quot;UMAP&quot;) &lt;- reducedDim(mae[[&#39;TileMatrix500&#39;]], &quot;UMAP&quot;) Visualize the data scater::plotReducedDim(GeneExpressionMatrix, dimred = &quot;UMAP&quot;, text_by = &quot;Clusters2&quot;, colour_by = &quot;Clusters2&quot;, point_size = 0.3, point_alpha = 0.3) 3.2 Retrieve bulk TF ChIP-seq binding sites First, we retrieve the information of TF binding sites collected from Cistrome and ENCODE ChIP-seq. Currently, human genomes hg19 and hg38 and mouse genome mm10 are available library(epiregulon) grl &lt;- getTFMotifInfo(genome = &quot;hg19&quot;) ## snapshotDate(): 2024-02-22 ## see ?scMultiome and browseVignettes(&#39;scMultiome&#39;) for documentation ## downloading 1 resources ## retrieving 1 resource ## loading from cache grl ## GRangesList object of length 1558: ## $`5-hmC` ## GRanges object with 22860 ranges and 0 metadata columns: ## seqnames ranges strand ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; ## [1] chr1 10001-10685 * ## [2] chr1 13362-13694 * ## [3] chr1 29631-29989 * ## [4] chr1 40454-40754 * ## [5] chr1 135395-135871 * ## ... ... ... ... ## [22856] chrM 15303-15326 * ## [22857] chrM 15328-16172 * ## [22858] chrM 16174-16183 * ## [22859] chrM 16186-16224 * ## [22860] chrM 16226-16492 * ## ------- ## seqinfo: 25 sequences from an unspecified genome; no seqlengths ## ## ... ## &lt;1557 more elements&gt; 3.3 Link ATACseq peaks to target genes Next, we compute peak to gene correlations using a custom algorithm that has similar performance to ArchR’s P2G function. Wherever possible, use a multidimensional dimensionality reduction matrix such as LSI or PCA instead of UMAP or TSNE since the former provides a more accurate estimate of cell similarity. set.seed(1010) p2g &lt;- calculateP2G(peakMatrix = PeakMatrix, expMatrix = GeneExpressionMatrix, exp_assay = &quot;normalizedCounts&quot;, reducedDim = reducedDim(GeneExpressionMatrix, &quot;IterativeLSI&quot;)) ## Using epiregulon to compute peak to gene links... ## performing k means clustering to form metacells ## Computing correlation p2g ## DataFrame with 23711 rows and 8 columns ## idxATAC chr start end idxRNA target Correlation distance ## &lt;integer&gt; &lt;character&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; &lt;array&gt; &lt;matrix&gt; &lt;integer&gt; ## 1 7 chr1 801002 801502 2 LINC00115 0.864244 36099 ## 2 8 chr1 805039 805539 6 KLHL17 0.625471 88427 ## 3 9 chr1 845326 845826 10 AGRN 0.545993 107676 ## 4 10 chr1 846428 846928 10 AGRN 0.646209 106574 ## 5 13 chr1 856263 856763 10 AGRN 0.549411 96739 ## ... ... ... ... ... ... ... ... ... ## 23707 146403 chr22 51021154 51021654 12089 ARSA 0.655996 44747 ## 23708 146412 chr22 51110826 51111326 12090 SHANK3 0.560404 0 ## 23709 146417 chr22 51143606 51144106 12090 SHANK3 0.500026 30336 ## 23710 146421 chr22 51213512 51214012 12090 SHANK3 0.504567 100242 ## 23711 146421 chr22 51213512 51214012 12091 ACR 0.557113 36660 3.4 Add TF motif binding to peaks The next step is to add the TF motif binding information by overlapping the regions of the peak matrix with the bulk chip-seq database. overlap &lt;- addTFMotifInfo(grl = grl, p2g = p2g, peakMatrix = PeakMatrix) ## Computing overlap... ## Success! head(overlap) ## idxATAC idxTF tf ## 1018 7 35 ARNT ## 1019 7 50 ATF2 ## 1020 7 55 ATF7 ## 1021 7 76 BCL6 ## 1022 7 80 BCOR ## 1023 7 82 BHLHE40 3.5 Generate regulons A long format dataframe, representing the inferred regulons, is then generated. The dataframe consists of three columns: tf (transcription factor) target gene peak to gene correlation between tf and target gene regulon &lt;- getRegulon(p2g, overlap, aggregate=FALSE) regulon ## DataFrame with 3561693 rows and 10 columns ## idxATAC chr start end idxRNA target distance idxTF tf corr ## &lt;integer&gt; &lt;character&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; &lt;character&gt; &lt;integer&gt; &lt;integer&gt; &lt;character&gt; &lt;matrix&gt; ## 1 7 chr1 801002 801502 2 LINC00115 36099 35 ARNT 0.864244 ## 2 7 chr1 801002 801502 2 LINC00115 36099 50 ATF2 0.864244 ## 3 7 chr1 801002 801502 2 LINC00115 36099 55 ATF7 0.864244 ## 4 7 chr1 801002 801502 2 LINC00115 36099 76 BCL6 0.864244 ## 5 7 chr1 801002 801502 2 LINC00115 36099 80 BCOR 0.864244 ## ... ... ... ... ... ... ... ... ... ... ... ## 3561689 146421 chr22 51213512 51214012 12091 ACR 36660 1433 ZNF574 0.557113 ## 3561690 146421 chr22 51213512 51214012 12091 ACR 36660 1468 ZNF654 0.557113 ## 3561691 146421 chr22 51213512 51214012 12091 ACR 36660 1471 ZNF660 0.557113 ## 3561692 146421 chr22 51213512 51214012 12091 ACR 36660 1480 ZNF692 0.557113 ## 3561693 146421 chr22 51213512 51214012 12091 ACR 36660 1546 ZSCAN30 0.557113 3.6 Prune network Epiregulon prunes the network by performing tests of independence on the observed number of cells jointly expressing transcription factor (TF), regulatory element (RE) and target gene (TG) vs the expected number of cells if TF/RE and TG are independently expressed. We implement two tests, the binomial test and the chi-square test. In the binomial test, the expected probability is P(TF, RE) * P(TG), and the number of trials is the total number of cells, and the observed successes is the number of cells jointly expressing all three elements. In the chi-square test, the expected probability for having all 3 elements active is also P(TF, RE) * P(TG) and the probability otherwise is 1- P(TF, RE) * P(TG). The observed cell count for the active category is the number of cells jointly expressing all three elements, and the cell count for the inactive category is n - n_triple. We calculate cluster-specific p-values if users supply cluster labels. This is useful if we are interested in cluster-specific networks. The pruned regulons can then be used to visualize differential networks for transcription factors of interest. See section on differential networks. pruned.regulon &lt;- pruneRegulon(expMatrix = GeneExpressionMatrix, exp_assay = &quot;normalizedCounts&quot;, peakMatrix = PeakMatrix, peak_assay = &quot;counts&quot;, regulon = regulon, prune_value = &quot;pval&quot;, regulon_cutoff = 0.05, clusters = GeneExpressionMatrix$Clusters2) ## pruning network with chi.sq tests using a regulon cutoff of pval&lt;0.05 ## pruning regulons 3.7 Add Weights While the pruneRegulon function provides statistics on the joint occurrence of TF-RE-TG, we would like to further estimate the strength of regulation. Biologically, this can be interpreted as the magnitude of gene expression changes induced by transcription factor activity. Epiregulon estimates the regulatory potential using one of the three measures: 1) correlation between TG and TF or between TG and the product of TF and RE, 2) mutual information between TG and TF expression or between TG and the product of TF and RE, or 3) Wilcoxon test statistics of target gene expression in cells jointly expressing all 3 elements vs cells that do not. Two measures (correlation and Wilcoxon) give both the magnitude and directionality of changes whereas mutational information is always positive. The correlation and mutual information statistics are computed on grouped pseudobulks by user-supplied cluster labels and yield a single weight across all clusters per each TF-RE-target triplet. In contrast, the Wilcoxon method group cells based on the joint expression of TF, RE and TG in each single cell or in cell aggregates. If cell labels are provided, we calculate cluster-specific weights in addition to estimating weights from all the cells. Cell aggregation uses a default value of 10 cells and can help overcome sparsity and speed up computation. If cluster labels are provided, we can obtain weights of individual clusters and all cells combined. In this example, we apply Wilcoxon test on cell aggregates of 10 cells. We use the Wilcoxon weight method because we are interested in computing cell type-specific weights. set.seed(1010) regulon.w &lt;- addWeights(regulon = pruned.regulon, expMatrix = GeneExpressionMatrix, exp_assay = &quot;normalizedCounts&quot;, peakMatrix = PeakMatrix, peak_assay = &quot;counts&quot;, clusters = GeneExpressionMatrix$Clusters2, aggregateCells = TRUE, method = &quot;wilcox&quot;, useDim = &quot;IterativeLSI&quot;) ## adding weights using wilcoxon... ## performing pseudobulk using an average of 10 cells ## | | | 0% | |======== | 7% | |================= | 13% | |========================= | 20% | |================================= | 27% | |========================================== | 33% | |================================================== | 40% | |========================================================== | 47% | |=================================================================== | 53% | |=========================================================================== | 60% | |=================================================================================== | 67% | |============================================================================================ | 73% | |==================================================================================================== | 80% | |============================================================================================================ | 87% | |===================================================================================================================== | 93% | |=============================================================================================================================| 100% ## ## | | | 0% | |== | 2% | |==== | 3% | |====== | 5% | |======== | 6% | |========== | 8% | |============ | 10% | |============== | 11% | |================ | 13% | |================== | 15% | |==================== | 16% | |====================== | 18% | |======================== | 19% | |========================== | 21% | |============================ | 23% | |============================== | 24% | |================================ | 26% | |================================== | 27% | |==================================== | 29% | |====================================== | 31% | |======================================== | 32% | |========================================== | 34% | |============================================ | 35% | |============================================== | 37% | |================================================ | 39% | |================================================== | 40% | |==================================================== | 42% | |====================================================== | 44% | |======================================================== | 45% | |========================================================== | 47% | |============================================================ | 48% | |============================================================== | 50% | |================================================================= | 52% | |=================================================================== | 53% | |===================================================================== | 55% | |======================================================================= | 56% | |========================================================================= | 58% | |=========================================================================== | 60% | |============================================================================= | 61% | |=============================================================================== | 63% | |================================================================================= | 65% | |=================================================================================== | 66% | |===================================================================================== | 68% | |======================================================================================= | 69% | |========================================================================================= | 71% | |=========================================================================================== | 73% | |============================================================================================= | 74% | |=============================================================================================== | 76% | |================================================================================================= | 77% | |=================================================================================================== | 79% | |===================================================================================================== | 81% | |======================================================================================================= | 82% | |========================================================================================================= | 84% | |=========================================================================================================== | 85% | |============================================================================================================= | 87% | |=============================================================================================================== | 89% | |================================================================================================================= | 90% | |=================================================================================================================== | 92% | |===================================================================================================================== | 94% | |======================================================================================================================= | 95% | |========================================================================================================================= | 97% | |=========================================================================================================================== | 98% | |=============================================================================================================================| 100% regulon.w ## DataFrame with 657594 rows and 14 columns ## idxATAC chr start end idxRNA target distance idxTF tf corr ## &lt;integer&gt; &lt;character&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; &lt;character&gt; &lt;integer&gt; &lt;integer&gt; &lt;character&gt; &lt;matrix&gt; ## 1 732 chr1 8021367 8021867 95 UTS2 46072 5 ADNP 0.611979 ## 2 891 chr1 9223922 9224422 107 H6PD 68440 5 ADNP 0.584584 ## 3 1153 chr1 11724014 11724514 135 FBXO6 0 5 ADNP 0.592732 ## 4 1154 chr1 11724524 11725024 135 FBXO6 174 5 ADNP 0.628880 ## 5 1476 chr1 16003338 16003838 181 DDI2 59185 5 ADNP 0.814973 ## ... ... ... ... ... ... ... ... ... ... ... ## 657590 115554 chr16 47526755 47527255 6715 PHKB 31345 1554 ZSCAN9 0.677586 ## 657591 123738 chr17 57297651 57298151 7874 SKA2 62850 1554 ZSCAN9 0.579244 ## 657592 137124 chr20 5654865 5655365 11011 GPCPD1 61192 1554 ZSCAN9 0.567896 ## 657593 146371 chr22 50946298 50946798 12078 LMF2 0 1554 ZSCAN9 0.620394 ## 657594 146387 chr22 50977917 50978417 12078 LMF2 29781 1554 ZSCAN9 0.517633 ## pval stats qval weight ## &lt;matrix&gt; &lt;matrix&gt; &lt;matrix&gt; &lt;matrix&gt; ## 1 1.11552e-06:1:0.00021207:... 23.7177:0:13.72100224:... 1.00000e+00:1:1:... 0.110121:-0.1840694:0.132197:... ## 2 2.42572e-53:1:1.00000000:... 236.3764:0: 0.00000000:... 7.88534e-47:1:1:... 0.328729: 0.0954775:0.218160:... ## 3 4.93505e-07:1:0.96772981:... 25.2890:0: 0.00163667:... 1.00000e+00:1:1:... 0.141786: 0.0000000:0.163860:... ## 4 1.70871e-07:1:0.96772981:... 27.3374:0: 0.00163667:... 5.15668e-01:1:1:... 0.142351: 0.1861417:0.180140:... ## 5 2.50344e-04:1:1.00000000:... 13.4096:0: 0.00000000:... 1.00000e+00:1:1:... 0.175202: 0.0000000:0.000000:... ## ... ... ... ... ... ## 657590 0.2147565:1:1:... 1.53907:0:0:... 1:1:1:... 0.05056956:0:0:... ## 657591 0.0222662:1:1:... 5.22486:0:0:... 1:1:1:... 0.28572101:0:0:... ## 657592 0.2157159:1:1:... 1.53265:0:0:... 1:1:1:... -0.01610573:0:0:... ## 657593 0.0769296:1:1:... 3.12860:0:0:... 1:1:1:... -0.00410307:0:0:... ## 657594 0.0769296:1:1:... 3.12860:0:0:... 1:1:1:... 0.02891813:0:0:... 3.8 Calculate TF activity Finally, the activities for a specific TF in each cell are computed by averaging the weighted expressions of target genes linked to the TF weighted. \\[y=\\frac{1}{n}\\sum_{i=1}^{n} x_i * weight_i\\] where \\(y\\) is the activity of a TF for a cell \\(n\\) is the total number of targets for a TF \\(x_i\\) is the log count expression of target i where i in {1,2,…,n} \\(weight_i\\) is the weight of TF and target i score.combine &lt;- calculateActivity(expMatrix = GeneExpressionMatrix, regulon = regulon.w, mode = &quot;weight&quot;, method = &quot;weightedMean&quot;, exp_assay = &quot;normalizedCounts&quot;) ## calculating TF activity from regulon using weightedmean ## Warning in calculateActivity(expMatrix = GeneExpressionMatrix, regulon = regulon.w, : The weight column contains multiple subcolumns ## but no cluster information was provided. Using first column to compute activity... ## aggregating regulons... ## creating weight matrix... ## calculating activity scores... ## normalize by the number of targets... head(score.combine[1:5,1:5]) ## 5 x 5 sparse Matrix of class &quot;dgCMatrix&quot; ## scATAC_BMMC_R1#TTATGTCAGTGATTAG-1 scATAC_BMMC_R1#AAGATAGTCACCGCGA-1 scATAC_BMMC_R1#GCATTGAAGATTCCGT-1 ## ADNP 0.12540975 0.1984176 0.1406705 ## AFF1 0.17697747 0.1920722 0.4015928 ## AFF4 0.11773447 0.3040020 0.1335912 ## AGO1 0.14920749 0.2183450 0.1035857 ## AGO2 0.08608048 0.3196278 0.1104752 ## scATAC_BMMC_R1#TATGTTCAGGGTTCCC-1 scATAC_BMMC_R1#AGTTACGAGAACGTCG-1 ## ADNP 0.1528068 0.14890448 ## AFF1 0.1837701 0.19387846 ## AFF4 0.1905391 0.13224086 ## AGO1 0.1647813 0.17582525 ## AGO2 0.1816408 0.08222916 3.9 Differential TF activity test We can next determine which TFs exhibit differential activities across cell clusters/groups via the findDifferentialActivity function. This function depends on findMarkers function from scran package. library(epiregulon.extra) markers &lt;- findDifferentialActivity(activity_matrix = score.combine, clusters = GeneExpressionMatrix$Clusters2, pval.type = &quot;some&quot;, direction = &quot;up&quot;, test.type = &quot;t&quot;) getSigGenes compiles the different test results into a single dataframe and enables user to supply their desired cutoffs for significance and variable to order by. markers.sig &lt;- getSigGenes(markers, topgenes = 3 ) ## Using a logFC cutoff of 0.1 for class B ## Using a logFC cutoff of 0.4 for class CD4.M ## Using a logFC cutoff of 0.2 for class CD4.N ## Using a logFC cutoff of 0.1 for class CLP ## Using a logFC cutoff of 0.2 for class Erythroid ## Using a logFC cutoff of 0.1 for class GMP ## Using a logFC cutoff of 0.6 for class Mono ## Using a logFC cutoff of 0.4 for class NK ## Using a logFC cutoff of 0.1 for class pDC ## Using a logFC cutoff of 0.2 for class PreB ## Using a logFC cutoff of 0.1 for class Progenitor 3.10 Visualizing TF activities Epiregulon also provides multiple options for visualizing the inferred TF activities by reduced dimensional space tSNE or UMAP plots: options(ggrastr.default.dpi=300) tfs_interest &lt;- c(&quot;EBF1&quot;,&quot;PAX5&quot;, &quot;GATA3&quot;,&quot;SPI1&quot;) plotActivityDim(sce = GeneExpressionMatrix, activity_matrix = score.combine[tfs_interest,], tf = tfs_interest, dimtype = &quot;UMAP&quot;, nrow=2, ncol=2, point_size=0.1, rasterise = TRUE) We can compare the activity with gene expression of the same TFs. plotActivityDim(sce = GeneExpressionMatrix, activity_matrix = assay(GeneExpressionMatrix, &quot;normalizedCounts&quot;)[tfs_interest,], tf = tfs_interest, dimtype = &quot;UMAP&quot;, nrow=2, ncol=2, legend.label = &quot;Gex&quot;, colors = c(&quot;grey&quot;,&quot;blue&quot;), point_size=0.1, rasterise = TRUE) We can also plot violin plot to visualize TF activity. plotActivityViolin(activity_matrix = score.combine, tf = tfs_interest, clusters = GeneExpressionMatrix$Clusters2, legend.label = &quot;Gex&quot;, nrow=2, ncol=2) We plot violin plot to visualize TF gene expression. plotActivityViolin(activity_matrix = assay(GeneExpressionMatrix, &quot;normalizedCounts&quot;)[tfs_interest,], tf = tfs_interest, clusters = GeneExpressionMatrix$Clusters2, nrow=2, ncol=2, legend.label = &quot;gene expression&quot;) We can visualize the different TFs in a bubble plot: plotBubble(activity_matrix = score.combine, tf = tfs_interest, GeneExpressionMatrix$Clusters2, bubblesize = &quot;FDR&quot;) We visualize the top differential TFs based on activity. plotBubble(activity_matrix = score.combine, tf = markers.sig$tf, GeneExpressionMatrix$Clusters2, bubblesize = &quot;FDR&quot;) 3.11 Geneset enrichment Sometimes we are interested to know what pathways are enriched in the regulon of a particular TF. We can perform geneset enrichment using the enricher function from clusterProfiler. Here we first download Hallmark and C2 signatures from hallmark and then perform gene set enrichment of the known lineage factors. As expected, EBF1 is consistent with a B cell lineage factor, GATA3 and RUNX3 with lymphoid lineage and SPI1 with myeloid lineage. #retrieve genesets H &lt;- EnrichmentBrowser::getGenesets(org = &quot;hsa&quot;, db = &quot;msigdb&quot;, cat = &quot;H&quot;, gene.id.type = &quot;SYMBOL&quot; ) ## Using cached version from 2024-02-23 17:12:04 C2 &lt;- EnrichmentBrowser::getGenesets(org = &quot;hsa&quot;, db = &quot;msigdb&quot;, cat = &quot;C2&quot;, gene.id.type = &quot;SYMBOL&quot; ) ## Using cached version from 2024-02-23 17:12:12 #combine genesets and convert genesets to be compatible with enricher gs &lt;- c(H, C2) gs.list &lt;- do.call(rbind,lapply(names(gs), function(x) {data.frame(gs=x, genes=gs[[x]])})) enrichresults &lt;- regulonEnrich(TF = tfs_interest, regulon = regulon.w, weight = &quot;weight&quot;, weight_cutoff = 0, genesets = gs.list) ## EBF1 ## PAX5 ## GATA3 ## SPI1 #plot results enrichPlot(results = enrichresults, ncol=2) 3.12 Differential Network analysis In addition to looking at the summed TF activity, a second approach to investigate differential TF activity is to compare and contrast target genes or network topology. In this example, we know that EBF1 is a B cell lineage factor. If we plot the differential network of EBF1 using the regulon with cluster-specific weights, we can see that EBF1 has many more targets in PreB cells than it has in CD4 memory T cells. plotDiffNetwork(regulon.w, cutoff = 0, tf = c(&quot;EBF1&quot;), weight = &quot;weight&quot;, clusters = c(&quot;PreB&quot;,&quot;CD4.M&quot;), layout = &quot;stress&quot;) ## Replacement of na values for weights with 0 ## Building graph using weight as edge weights Sometimes, we are interested to identify interaction partners of the TFs of interest. This can be achieved by comparing the overlap of the targets genes for all the TFs and identify the most similar TFs by Jaccard similarity. To illustrate this function, we take a look at the top most similar 20 TFs to EBF1, and we successfully identify PAX5 as the most similar TF. Both PAX5 and EBF1 are important factors for B cell development (https://www.nature.com/articles/ni.2641). library(ggplot2) # construct a graph of the preB cells preB_network &lt;- buildGraph(regulon.w, weights = &quot;weight&quot;, cluster=&quot;PreB&quot;) ## Building graph using weight as edge weights # compute a similarity matrix of all TFs similarity_score &lt;- calculateJaccardSimilarity(preB_network) # Focus on EBF1 similarity_score_EBF1 &lt;- similarity_score[, &quot;EBF1&quot;] similarity_df &lt;- data.frame(similarity = head(sort(similarity_score_EBF1, decreasing = TRUE),20), TF = names(head(sort(similarity_score_EBF1, decreasing = TRUE),20))) similarity_df$TF &lt;- factor(similarity_df$TF, levels = rev(unique(similarity_df$TF))) # plot top TFs most similar to EBF1 topTFplot &lt;- ggplot(similarity_df, aes(x=TF, y=similarity)) + geom_bar(stat=&quot;identity&quot;) + coord_flip() + ggtitle(&quot;EBF1 similarity&quot;) + theme_classic() print(topTFplot) In order to convince ourselves that our differential network is statistically significant, we permute the edges and obtain a background graph from averaging many iterations. Here, we plot the differential network graph subtracted by permuted graphs. # create a permuted graph by rewiring the edges 100 times permute_matrix &lt;- permuteGraph(preB_network, &quot;EBF1&quot;, 100, p=1) permute_matrix &lt;- permute_matrix[names(similarity_score_EBF1),] diff_matrix &lt;- similarity_score_EBF1-rowMeans(permute_matrix) diff_matrix_df &lt;- data.frame(similarity = head(sort(diff_matrix, decreasing = TRUE),20), TF = names(head(sort(diff_matrix, decreasing = TRUE),20))) diff_matrix_df$TF &lt;- factor(diff_matrix_df$TF, levels = rev(unique(diff_matrix_df$TF))) # plot top TFs most similar to EBF1 topTFplot &lt;- ggplot(diff_matrix_df, aes(x=TF, y=similarity)) + geom_bar(stat=&quot;identity&quot;) + coord_flip() + ggtitle(&quot;background subtracted EBF1 similarity &quot;) + theme_classic() print(topTFplot) # obtain empirical p-values p_matrix &lt;- rowMeans(apply(permute_matrix, 2, function(x) {x &gt; similarity_score_EBF1})) p_matrix[names(head(sort(diff_matrix,decreasing = TRUE),20))] ## PAX5 IRF4 TCF3 RAG2 TCF12 POU2F2 RB1 NIPBL TCF4 TRIM22 RAG1 MEF2A BCL11A RELB CREM MYB EP300 EZH2 CDK9 ## 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## CREBBP ## 0 Next, we are interested to compare the networks of two cell types, in this case, CD4 memory T cells (CD4.M) vs Monocytes (mono) cells. We build an edge subtracted graph and then calculate the degree centrality of the subtracted graph. We normalize centrality using the default square root function. The top 5 most positive TFs represent lineage factors more active in NK cells whereas the bottom 5 TFs present lineage factors enriched in CD4. We successfully identified the myeloid factor SPI1 to be associated with monocytes and Th1 factor TBX21 to be associated with CD4 T cells. #regulon.w.2 &lt;- regulon.w #regulon.w &lt;- readRDS(&quot;/gstore/project/lineage/manuscript/epiregulon/OUTPUT/regulon.w.rds&quot;) # construct a graph of the CD4.M and NK cells respectively CD4.M_network &lt;- buildGraph(regulon.w, weights = &quot;weight&quot;, cluster=&quot;CD4.M&quot;) ## Building graph using weight as edge weights Mono_network &lt;- buildGraph(regulon.w, weights = &quot;weight&quot;, cluster=&quot;Mono&quot;) ## Building graph using weight as edge weights # construct a difference graph diff_graph &lt;- buildDiffGraph(Mono_network,CD4.M_network, abs_diff = FALSE) diff_graph &lt;- addCentrality(diff_graph) diff_graph &lt;- normalizeCentrality(diff_graph) rank_table &lt;- rankTfs(diff_graph) library(ggplot2) ggplot(rank_table, aes(x = rank, y = centrality)) + geom_point() + ggrepel::geom_text_repel(data = rbind(head(rank_table, 10), tail(rank_table, 10)), aes(label = tf), nudge_x = 0, nudge_y = 0, box.padding = 0.5, max.overlaps = Inf) + theme_classic() + ggtitle (&quot;differential TFs (Mono-CD4.M) ranked by degree centrality&quot;) We can further explore interacting factors with the myeloid factor SPI1 using the same Jaccard similarity approach. We found CEBPA as the most similar TF as SPI1. SPI1 and CEBPA are known to be important for differentiation into myeloid cells (https://www.cell.com/cell-reports/pdfExtended/S2211-1247(18)30745-9). library(igraph) diff_graph_filter &lt;- subgraph.edges(diff_graph, E(diff_graph)[E(diff_graph)$weight&gt;0], del=TRUE) # compute a similarity matrix of all TFs similarity_score &lt;- calculateJaccardSimilarity(diff_graph_filter) # Focus on SPI1 similarity_score_SPI1 &lt;- similarity_score[, &quot;SPI1&quot;] similarity_df &lt;- data.frame(similarity = head(sort(similarity_score_SPI1, decreasing = TRUE),20), TF = names(head(sort(similarity_score_SPI1, decreasing = TRUE),20))) similarity_df$TF &lt;- factor(similarity_df$TF, levels = rev(unique(similarity_df$TF))) # plot top TFs most similar to SPI1 topTFplot &lt;- ggplot(similarity_df, aes(x=TF, y=similarity)) + geom_bar(stat=&quot;identity&quot;) + coord_flip() + ggtitle(&quot;SPI1 similarity&quot;) + theme_classic() print(topTFplot) 3.13 Session Info sessionInfo() ## R Under development (unstable) (2023-12-04 r85659) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 18.04.6 LTS ## ## Matrix products: default ## BLAS: /usr/local/lib/R/lib/libRblas.so ## LAPACK: /usr/local/lib/R/lib/libRlapack.so; LAPACK version 3.11.0 ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## time zone: Etc/UTC ## tzcode source: system (glibc) ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] igraph_2.0.2 ggplot2_3.4.4 org.Hs.eg.db_3.18.0 ## [4] AnnotationDbi_1.65.2 msigdbr_7.5.1 epiregulon.extra_0.99.1 ## [7] BSgenome.Hsapiens.UCSC.hg38_1.4.5 BSgenome_1.71.2 rtracklayer_1.63.0 ## [10] BiocIO_1.13.0 Biostrings_2.71.2 XVector_0.43.1 ## [13] epiregulon_0.99.2 scMultiome_1.3.0 SingleCellExperiment_1.25.0 ## [16] MultiAssayExperiment_1.29.1 SummarizedExperiment_1.33.3 Biobase_2.63.0 ## [19] GenomicRanges_1.55.3 GenomeInfoDb_1.39.6 IRanges_2.37.1 ## [22] S4Vectors_0.41.3 MatrixGenerics_1.15.0 matrixStats_1.2.0 ## [25] ExperimentHub_2.11.1 AnnotationHub_3.11.1 BiocFileCache_2.11.1 ## [28] dbplyr_2.4.0 BiocGenerics_0.49.1 ## ## loaded via a namespace (and not attached): ## [1] fs_1.6.3 bitops_1.0-7 enrichplot_1.23.1 DirichletMultinomial_1.45.0 ## [5] TFBSTools_1.41.0 HDO.db_0.99.1 httr_1.4.7 RColorBrewer_1.1-3 ## [9] doParallel_1.0.17 Rgraphviz_2.47.0 tools_4.4.0 backports_1.4.1 ## [13] utf8_1.2.4 R6_2.5.1 HDF5Array_1.31.5 lazyeval_0.2.2 ## [17] rhdf5filters_1.15.2 GetoptLong_1.0.5 withr_3.0.0 gridExtra_2.3 ## [21] cli_3.6.2 Cairo_1.6-2 scatterpie_0.2.1 labeling_0.4.3 ## [25] sass_0.4.8 KEGGgraph_1.63.0 readr_2.1.5 Rsamtools_2.19.3 ## [29] yulab.utils_0.1.4 gson_0.1.0 DOSE_3.29.2 R.utils_2.12.3 ## [33] scater_1.31.2 limma_3.59.3 rstudioapi_0.15.0 RSQLite_2.3.5 ## [37] gridGraphics_0.5-1 generics_0.1.3 shape_1.4.6 gtools_3.9.5 ## [41] dplyr_1.1.4 GO.db_3.18.0 Matrix_1.6-4 ggbeeswarm_0.7.2 ## [45] fansi_1.0.6 abind_1.4-5 R.methodsS3_1.8.2 lifecycle_1.0.4 ## [49] yaml_2.3.8 edgeR_4.1.17 qvalue_2.35.0 rhdf5_2.47.4 ## [53] SparseArray_1.3.4 grid_4.4.0 blob_1.2.4 dqrng_0.3.2 ## [57] crayon_1.5.2 lattice_0.22-5 beachmat_2.19.1 cowplot_1.1.3 ## [61] annotate_1.81.2 KEGGREST_1.43.0 magick_2.8.3 pillar_1.9.0 ## [65] knitr_1.45 ComplexHeatmap_2.19.0 metapod_1.11.1 fgsea_1.29.0 ## [69] rjson_0.2.21 codetools_0.2-19 fastmatch_1.1-4 glue_1.7.0 ## [73] ggfun_0.1.4 data.table_1.15.0 treeio_1.27.0 vctrs_0.6.5 ## [77] png_0.1-8 gtable_0.3.4 poweRlaw_0.80.0 cachem_1.0.8 ## [81] xfun_0.42 S4Arrays_1.3.3 mime_0.12 tidygraph_1.3.1 ## [85] pracma_2.4.4 iterators_1.0.14 statmod_1.5.0 bluster_1.13.0 ## [89] nlme_3.1-164 ggtree_3.11.0 bit64_4.0.5 filelock_1.0.3 ## [93] bslib_0.6.1 irlba_2.3.5.1 vipor_0.4.7 colorspace_2.1-0 ## [97] seqLogo_1.69.0 DBI_1.2.2 ggrastr_1.0.2 tidyselect_1.2.0 ## [101] bit_4.0.5 compiler_4.4.0 curl_5.2.0 graph_1.81.0 ## [105] BiocNeighbors_1.21.2 DelayedArray_0.29.4 shadowtext_0.1.3 bookdown_0.37 ## [109] checkmate_2.3.1 scales_1.3.0 caTools_1.18.2 rappdirs_0.3.3 ## [113] stringr_1.5.1 digest_0.6.34 motifmatchr_1.25.0 rmarkdown_2.25 ## [117] htmltools_0.5.7 pkgconfig_2.0.3 sparseMatrixStats_1.15.0 highr_0.10 ## [121] fastmap_1.1.1 rlang_1.1.3 GlobalOptions_0.1.2 DelayedMatrixStats_1.25.1 ## [125] farver_2.1.1 jquerylib_0.1.4 jsonlite_1.8.8 BiocParallel_1.37.0 ## [129] GOSemSim_2.29.1 R.oo_1.26.0 BiocSingular_1.19.0 RCurl_1.98-1.14 ## [133] magrittr_2.0.3 ggplotify_0.1.2 scuttle_1.13.0 GenomeInfoDbData_1.2.11 ## [137] patchwork_1.2.0 Rhdf5lib_1.25.1 munsell_0.5.0 Rcpp_1.0.12 ## [141] ape_5.7-1 babelgene_22.9 viridis_0.6.5 EnrichmentBrowser_2.33.1 ## [145] stringi_1.8.3 ggraph_2.1.0 MASS_7.3-60.1 zlibbioc_1.49.0 ## [149] plyr_1.8.9 parallel_4.4.0 ggrepel_0.9.5 CNEr_1.39.0 ## [153] graphlayouts_1.1.0 splines_4.4.0 hms_1.1.3 circlize_0.4.16 ## [157] locfit_1.5-9.8 reshape2_1.4.4 ScaledMatrix_1.11.0 TFMPvalue_0.0.9 ## [161] BiocVersion_3.19.1 XML_3.99-0.16.1 evaluate_0.23 scran_1.31.0 ## [165] BiocManager_1.30.22 tweenr_2.0.2 tzdb_0.4.0 foreach_1.5.2 ## [169] polyclip_1.10-6 tidyr_1.3.1 purrr_1.0.2 clue_0.3-65 ## [173] ggforce_0.4.2 rsvd_1.0.5 xtable_1.8-4 restfulr_0.0.15 ## [177] tidytree_0.4.6 viridisLite_0.4.2 tibble_3.2.1 aplot_0.2.2 ## [181] clusterProfiler_4.11.0 memoise_2.0.1 beeswarm_0.4.0 GenomicAlignments_1.39.4 ## [185] cluster_2.1.6 GSEABase_1.65.1 BiocStyle_2.31.0 "],["archr-workflow-and-different-weight-methods.html", "4 ArchR workflow and different weight methods 4.1 Data preparation 4.2 Load ArchR project 4.3 Retrieve matrices from ArchR project 4.4 Retrieve bulk TF ChIP-seq binding sites 4.5 Link ATAC-seq peaks to target genes 4.6 Add TF motif binding to peaks 4.7 Generate regulons 4.8 (Optional) Annotate with TF motifs 4.9 Prune network 4.10 Add Weights 4.11 Calculate TF activity 4.12 Perform differential activity 4.13 Visualize the results 4.14 Differential network analysis 4.15 Session Info", " 4 ArchR workflow and different weight methods In this chapter, we illustrate the epiregulon workflow starting from an ArchR project and compare the different weight estimation methods. The dataset consists of unpaired scATACseq/scRNAseq of parental LNCaP cells treated with DMSO, Enzalutamide and Enza resistant cells. The dataset was taken from Taavitsainen et al GSE168667 and GSE168668. 4.1 Data preparation Please refer to the full ArchR manual for instructions Before running Epiregulon, the following analyses need to be completed: Obtain a peak matrix on scATACseq by using addGroupCoverages &gt; addReproduciblePeakSet &gt; addPeakMatrix. See chapter 10 from ArchR manual RNA-seq integration. For unpaired scATAC-seq, use addGeneIntegrationMatrix. See chapter 8 from ArchR manual For multiome data, use addGeneExpressionMatrix. See multiome tutorial Perform dimensionality reduction from with either single modalities or joint scRNAseq and scATACseq using addCombinedDims 4.2 Load ArchR project library(ArchR) archR_project_path &lt;- &quot;/gstore/project/lineage/prostate/GSE168667/OUTPUT/multiome/&quot; proj &lt;- loadArchRProject(path = archR_project_path, showLogo = FALSE) We verify that “GeneExpressionMatrix” and “PeakMatrix” are present for this tutorial. getAvailableMatrices(proj) ## [1] &quot;GeneIntegrationMatrix&quot; &quot;GeneScoreMatrix&quot; &quot;MotifMatrix&quot; &quot;PeakMatrix&quot; &quot;TileMatrix&quot; We will use the joint reducedDims - “LSI_Combined” and joint embeddings - “UMAP_Combined” head(getReducedDims(proj, reducedDims = &quot;iLSI_Combined&quot;)[,1:5]) ## LSI1 LSI2 LSI3 LSI4 LSI5 ## SRR13927735#TTATGTCTCCAGGTAT-1 -2.713935 -0.3677949 -0.4484238 -0.30645138 -0.046845365 ## SRR13927735#TATTGCTCATCAGAAA-1 -2.642781 -0.2767556 -0.9142714 -0.19675812 0.075746940 ## SRR13927735#TTCGATTGTAGGGTTG-1 -2.322865 -0.1543080 -1.4106049 -0.08891276 0.019873276 ## SRR13927735#CATTCATTCGGATGTT-1 -2.572976 -0.1917188 -1.0464294 -0.12660121 0.009947438 ## SRR13927735#ACGTTAGGTCAACTGT-1 -2.478552 -0.1776639 -1.1037295 -0.22976613 -0.150097539 ## SRR13927735#AAATGCCCAGCAATGG-1 -2.595352 -0.3803464 -0.7770309 -0.52431765 -0.243074591 head(getEmbedding(proj, embedding = &quot;UMAP_Combined&quot;)) ## iLSI_Combined#UMAP_Dimension_1 iLSI_Combined#UMAP_Dimension_2 ## SRR13927735#TTATGTCTCCAGGTAT-1 -9.622903 -0.2908237 ## SRR13927735#TATTGCTCATCAGAAA-1 -9.360211 -0.2892935 ## SRR13927735#TTCGATTGTAGGGTTG-1 -8.617347 -0.2154103 ## SRR13927735#CATTCATTCGGATGTT-1 -9.285448 -0.3267481 ## SRR13927735#ACGTTAGGTCAACTGT-1 -8.809260 -0.2168703 ## SRR13927735#AAATGCCCAGCAATGG-1 -9.261216 0.3200356 4.3 Retrieve matrices from ArchR project Retrieve gene expression and peak matrix from the ArchR project GeneExpressionMatrix &lt;- getMatrixFromProject( ArchRProj = proj, useMatrix = &quot;GeneIntegrationMatrix&quot;, useSeqnames = NULL, verbose = TRUE, binarize = FALSE, threads = 1, logFile = &quot;x&quot; ) ## 2024-02-23 09:47:59.878191 : Organizing colData, 1.857 mins elapsed. ## 2024-02-23 09:48:00.932976 : Organizing rowData, 1.875 mins elapsed. ## 2024-02-23 09:48:00.942555 : Organizing rowRanges, 1.875 mins elapsed. ## 2024-02-23 09:48:00.956437 : Organizing Assays (1 of 1), 1.875 mins elapsed. ## 2024-02-23 09:48:14.431928 : Constructing SummarizedExperiment, 2.1 mins elapsed. ## 2024-02-23 09:48:17.234764 : Finished Matrix Creation, 2.146 mins elapsed. PeakMatrix &lt;- getMatrixFromProject( ArchRProj = proj, useMatrix = &quot;PeakMatrix&quot;, useSeqnames = NULL, verbose = TRUE, binarize = FALSE, threads = 1, logFile = &quot;x&quot; ) ## 2024-02-23 09:49:39.984216 : Organizing colData, 1.369 mins elapsed. ## 2024-02-23 09:49:40.871321 : Organizing rowData, 1.383 mins elapsed. ## 2024-02-23 09:49:40.882951 : Organizing rowRanges, 1.384 mins elapsed. ## 2024-02-23 09:49:40.898544 : Organizing Assays (1 of 1), 1.384 mins elapsed. ## 2024-02-23 09:49:44.257088 : Constructing SummarizedExperiment, 1.44 mins elapsed. ## 2024-02-23 09:50:05.839507 : Finished Matrix Creation, 1.799 mins elapsed. If we extract the gene expression from matrix, it will be in the form of RangedSummarizedExperiment. We can make use of ArchRMatrix2SCE to convert gene expression matrix to SingleCellExperiment object. It’s also important to note that gene expression from ArchR is library size normalized (not logged) library(epiregulon.archr) ## ## Attaching package: &#39;epiregulon.archr&#39; ## The following objects are masked from &#39;package:epiregulon&#39;: ## ## addMotifScore, addTFMotifInfo, calculateP2G, getTFMotifInfo GeneExpressionMatrix &lt;- ArchRMatrix2SCE(GeneExpressionMatrix) rownames(GeneExpressionMatrix) &lt;- rowData(GeneExpressionMatrix)$name We rename the assay name of the PeakMatrix as counts assayNames(PeakMatrix) &lt;- &quot;counts&quot; Transfer embeddings from ArchR project to singleCellExperiment for visualization reducedDim(GeneExpressionMatrix, &quot;UMAP_Combined&quot;) &lt;- getEmbedding(ArchRProj = proj, embedding = &quot;UMAP_Combined&quot;, returnDF = TRUE)[colnames(GeneExpressionMatrix),] # add cell label GeneExpressionMatrix$label &lt;- GeneExpressionMatrix$Cells GeneExpressionMatrix$label[GeneExpressionMatrix$Treatment == &quot;enzalutamide 48h&quot;] &lt;- &quot;LNCaP–ENZ48&quot; GeneExpressionMatrix$label &lt;- factor(GeneExpressionMatrix$label, levels = c(&quot;LNCaP&quot;, &quot;LNCaP–ENZ48&quot;, &quot;LNCaP RES-A&quot;, &quot;LNCaP RES-B&quot;)) Visualize singleCellExperiment by UMAP scater::plotReducedDim(GeneExpressionMatrix, dimred = &quot;UMAP_Combined&quot;, text_by = &quot;label&quot;, colour_by = &quot;label&quot;) 4.4 Retrieve bulk TF ChIP-seq binding sites First, we retrieve the information of TF binding sites collected from Cistrome and ENCODE ChIP-seq. Currently, human genomes HG19 and HG38 and mouse mm10 are available. grl &lt;- getTFMotifInfo(genome = &quot;hg38&quot;) ## snapshotDate(): 2024-02-22 ## see ?scMultiome and browseVignettes(&#39;scMultiome&#39;) for documentation ## loading from cache grl ## GRangesList object of length 1558: ## $`5-hmC` ## GRanges object with 24048 ranges and 0 metadata columns: ## seqnames ranges strand ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; ## [1] chr1 10000-10685 * ## [2] chr1 13362-13694 * ## [3] chr1 29631-29989 * ## [4] chr1 40454-40754 * ## [5] chr1 135395-135871 * ## ... ... ... ... ## [24044] chrY 56864377-56864627 * ## [24045] chrY 56876124-56876182 * ## [24046] chrM 84-2450 * ## [24047] chrM 13613-14955 * ## [24048] chrM 15134-16490 * ## ------- ## seqinfo: 25 sequences from an unspecified genome; no seqlengths ## ## ... ## &lt;1557 more elements&gt; 4.5 Link ATAC-seq peaks to target genes Next, we compute peak to gene correlations using the addPeak2GeneLinks function from the ArchR package. The user would need to supply a path to an ArchR project already containing peak and gene matrices, as well as Latent semantic indexing (LSI) dimensionality reduction. # path to ArchR project p2g &lt;- calculateP2G(ArchR_path = archR_project_path, useDim = &quot;iLSI_Combined&quot;, useMatrix = &quot;GeneIntegrationMatrix&quot;, threads = 1) ## Setting ArchRLogging = FALSE ## Using ArchR to compute peak to gene links... ## 2024-02-23 09:50:28.659413 : Getting Available Matrices, 0 mins elapsed. ## 2024-02-23 09:50:30.834517 : Filtered Low Prediction Score Cells (0 of 15522, 0), 0.005 mins elapsed. ## 2024-02-23 09:50:31.591285 : Computing KNN, 0.018 mins elapsed. ## 2024-02-23 09:50:34.56495 : Identifying Non-Overlapping KNN pairs, 0.067 mins elapsed. ## 2024-02-23 09:50:37.257167 : Identified 498 Groupings!, 0.112 mins elapsed. ## 2024-02-23 09:50:37.318631 : Getting Group RNA Matrix, 0.113 mins elapsed. ## 2024-02-23 09:53:58.584016 : Getting Group ATAC Matrix, 3.468 mins elapsed. ## 2024-02-23 09:57:27.824984 : Normalizing Group Matrices, 6.955 mins elapsed. ## 2024-02-23 09:57:38.115002 : Finding Peak Gene Pairings, 7.127 mins elapsed. ## 2024-02-23 09:57:38.664318 : Computing Correlations, 7.136 mins elapsed. ## 2024-02-23 09:57:48.103225 : Completed Peak2Gene Correlations!, 7.293 mins elapsed. p2g ## DataFrame with 17979 rows and 8 columns ## idxATAC chr start end idxRNA target Correlation distance ## &lt;integer&gt; &lt;factor&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; &lt;character&gt; &lt;numeric&gt; &lt;numeric&gt; ## 1 15 chr1 912762 913262 7 NOC2L 0.546722 46297 ## 2 15 chr1 912762 913262 8 KLHL17 0.516539 47575 ## 3 25 chr1 920261 920761 7 NOC2L 0.649425 38798 ## 4 25 chr1 920261 920761 8 KLHL17 0.637711 40076 ## 5 32 chr1 927728 928228 7 NOC2L 0.610240 31331 ## ... ... ... ... ... ... ... ... ... ## 17975 210643 chrX 154542721 154543221 23496 CH17-340M24.3 0.611273 114492 ## 17976 210643 chrX 154542721 154543221 23501 LAGE3 0.698033 63714 ## 17977 210643 chrX 154542721 154543221 23506 IKBKG 0.518586 1716 ## 17978 210643 chrX 154542721 154543221 23509 DKC1 0.526624 219771 ## 17979 210665 chrX 154815200 154815700 23515 F8 0.547783 211490 4.6 Add TF motif binding to peaks The next step is to add the TF motif binding information by overlapping the regions of the peak matrix with the bulk chip-seq database. The user can supply an archR project path and this function will retrieve the peak matrix, or a peakMatrix in the form of a Granges object or RangedSummarizedExperiment. overlap &lt;- addTFMotifInfo(archR_project_path = archR_project_path, grl = grl, p2g = p2g) ## Successfully loaded ArchRProject! ## Computing overlap... ## Success! 4.7 Generate regulons A long format data frame, representing the inferred regulons, is then generated. The data frame consists of three columns: tf (transcription factor) target gene peak to gene correlation between tf and target gene regulon &lt;- getRegulon(p2g = p2g, overlap = overlap, aggregate = FALSE) regulon ## DataFrame with 2786857 rows and 10 columns ## idxATAC chr start end idxRNA target corr distance idxTF tf ## &lt;integer&gt; &lt;factor&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; &lt;character&gt; &lt;matrix&gt; &lt;numeric&gt; &lt;integer&gt; &lt;character&gt; ## 1 15 chr1 912762 913262 8 KLHL17 47575 10 AGO1 ## 2 15 chr1 912762 913262 8 KLHL17 47575 22 AML1-ETO ## 3 15 chr1 912762 913262 8 KLHL17 47575 32 ARID4A ## 4 15 chr1 912762 913262 8 KLHL17 47575 33 ARID4B ## 5 15 chr1 912762 913262 8 KLHL17 47575 34 ARID5B ## ... ... ... ... ... ... ... ... ... ... ... ## 2786853 210665 chrX 154815200 154815700 23515 F8 211490 1214 ZBTB8A ## 2786854 210665 chrX 154815200 154815700 23515 F8 211490 1366 ZNF395 ## 2786855 210665 chrX 154815200 154815700 23515 F8 211490 1443 ZNF589 ## 2786856 210665 chrX 154815200 154815700 23515 F8 211490 1444 ZNF592 ## 2786857 210665 chrX 154815200 154815700 23515 F8 211490 1463 ZNF639 4.8 (Optional) Annotate with TF motifs So far the gene regulatory network was constructed from TF ChIP-seq exclusively. Some users would prefer to further annotate the regulatory elements with the presence of motifs. If motif annotation has been previously performed by ArchR, addMotifScore can retrieve this annotation from the ArchR project. If motifs are available for a factor and the RE contains a motif, we return 1. If motifs are available and the RE does not contain a motif, we return 0. If no motifs are known for this particular factor (as in the case of co-factors or chromatin modifiers), we return NA. If the user has not performed motif annotation with ArchR, we can also annotate the peaks with motifs using the Cisbp database (default) or user-provided PWMS. See ?addMotifScore It is important to note that filtering for the presence of motifs removes a large fraction of the target genes. Motifs are often present in a small subset of the ChIP-seq peaks (can be as low as 10%). Second, indirect TF binding, possibly through its interaction partners, may have a true biological function. In this example, we continue with regulons containing the motifs, regulon.motif. However, if the user prefers to retain all target genes including REs without the motifs, they should proceed with regulon. regulon.motif &lt;- addMotifScore(regulon = regulon, ArchProj = proj ) ## retrieving motif information from ArchR project # retain only TF-RE-TG triplets with motifs regulon.motif &lt;- regulon.motif[which(regulon.motif$motif ==1),] 4.9 Prune network Epiregulon prunes the network by performing tests of independence on the observed number of cells jointly expressing transcription factor (TF), regulatory element (RE) and target gene (TG) vs the expected number of cells if TF/RE and TG are independently expressed. We implement two tests, the binomial test and the chi-square test. In the binomial test, the expected probability is P(TF, RE) * P(TG), and the number of trials is the total number of cells, and the observed successes is the number of cells jointly expressing all three elements. In the chi-square test, the expected probability for having all 3 elements active is also P(TF, RE) * P(TG) and the probability otherwise is 1- P(TF, RE) * P(TG). The observed cell count for the active category is the number of cells jointly expressing all three elements, and the cell count for the inactive category is n - n_triple. We calculate cluster-specific p-values if users supply cluster labels. This is useful if we are interested in cluster-specific networks. The pruned regulons can then be used to visualize differential networks for transcription factors of interest. See section on differential networks. pruned.regulon &lt;- pruneRegulon(expMatrix = GeneExpressionMatrix, exp_assay = &quot;counts&quot;, peakMatrix = PeakMatrix, peak_assay = &quot;counts&quot;, test = &quot;chi.sq&quot;, regulon = regulon.motif, clusters = GeneExpressionMatrix$label, prune_value = &quot;pval&quot;, regulon_cutoff = 0.05) 4.10 Add Weights While the `pruneRegulon’ function provides statistics on the joint occurrence of TF-RE-TG, we would like to further estimate the strength of regulation. Biologically, this can be interpreted as the magnitude of gene expression changes induced by transcription factor activity. Epiregulon estimates the regulatory potential using one of the three measures: 1) correlation between TG and TF or between TG and the product of TF and RE, 2) mutual information between TG and TF expression or between TG and the product of TF and RE, or 3) Wilcoxon test statistics of target gene expression in cells jointly expressing all 3 elements vs cells that do not. Two measures (correlation and Wilcoxon) give both the magnitude and directionality of changes whereas mutational information is always positive. The correlation and mutual information statistics are computed on grouped pseudobulks by user-supplied cluster labels and yield a single weight across all clusters per each TF-RE-target triplet. In contrast, the Wilcoxon method group cells based on the joint expression of TF, RE and TG in each single cell or in cell aggregates. If cell labels are provided, we calculate cluster-specific weights in addition to estimating weights from all the cells. Cell aggregation uses a default value of 10 cells and can help overcome sparsity and speed up computation. If cluster labels are provided, we can obtain weights of individual clusters and all cells combined. In the case of drug treatment, however, the activity of TF is suppressed often not by downregulation of the TF gene expression, but by direct interference of the TF protein function. In this dataset, the drug enzalutamide blocks the ligand binding domain of the androgen receptor and prevents it from binding to the chromatin. As a result, while the AR gene expression stays the same, the chromatin accessibility of AR, as computed by chromVar in the ArchR package, is greatly reduced by 48 hour treatment of enzalutamide. First, we visualize the AR expression and show that enzalutamide does not decrease AR expression. library(epiregulon.extra) plotActivityDim(sce = GeneExpressionMatrix, activity_matrix = assay(GeneExpressionMatrix), tf = &quot;AR&quot;, dimtype = &quot;UMAP_Combined&quot;, label = &quot;label&quot;, point_size = 1, legend.label = &quot;gene expression&quot;) Then we extract the chromVarMatrix from ArchR project and then visualize the chromatin accessibility at AR bound sites. We can see that 48 hour of enzalutamide treatment reduced chromatin accessibility at AR bound sites chromVarMatrix &lt;- getMatrixFromProject( ArchRProj = proj, useMatrix = &quot;MotifMatrix&quot;, useSeqnames = NULL, verbose = TRUE, binarize = FALSE, threads = 1 ) ## 2024-02-23 10:00:13.589199 : Organizing colData, 0.412 mins elapsed. ## 2024-02-23 10:00:13.745511 : Organizing rowData, 0.414 mins elapsed. ## 2024-02-23 10:00:13.748369 : Organizing rowRanges, 0.414 mins elapsed. ## 2024-02-23 10:00:13.753636 : Organizing Assays (1 of 2), 0.415 mins elapsed. ## 2024-02-23 10:00:14.033793 : Organizing Assays (2 of 2), 0.419 mins elapsed. ## 2024-02-23 10:00:14.309042 : Constructing SummarizedExperiment, 0.424 mins elapsed. ## 2024-02-23 10:00:17.726051 : Finished Matrix Creation, 0.481 mins elapsed. plotActivityDim(sce = GeneExpressionMatrix, activity_matrix = assay(chromVarMatrix, &quot;z&quot;), tf = &quot;AR_689&quot;, dimtype = &quot;UMAP_Combined&quot;, label = &quot;label&quot;, point_size = 1, legend.label = &quot;chromVar&quot;) Next, we are going to compare 3 different weight methods. In the first method, the wilcoxon test compares target gene expression in cells meeting both the TF expression and accessibility cutoffs vs cells failing either the TF expression or/and accessibility cutoffs. Next, we try out the correlation method which comes in two flavors. When tf_re.merge = FALSE, weight is computed on the correlation of target gene expression vs TF gene expression. When tf_re.merge = TRUE, weight is computed on the correlation of target gene expression vs the product of TF expression and chromatin accessibility at TF-bound regulatory elements. regulon.w.wilcox &lt;- addWeights(regulon = pruned.regulon, expMatrix = GeneExpressionMatrix, exp_assay = &quot;counts&quot;, peakMatrix = PeakMatrix, peak_assay = &quot;counts&quot;, clusters = GeneExpressionMatrix$label, method = &quot;wilcoxon&quot;) ## adding weights using wilcoxon... regulon.w.corr &lt;- addWeights(regulon = pruned.regulon, expMatrix = GeneExpressionMatrix, exp_assay = &quot;counts&quot;, peakMatrix = PeakMatrix, peak_assay = &quot;counts&quot;, clusters = GeneExpressionMatrix$label, method = &quot;corr&quot;) ## adding weights using corr... ## calculating average expression across clusters... ## computing weights... regulon.w.corr.re &lt;- addWeights(regulon = pruned.regulon, expMatrix = GeneExpressionMatrix, exp_assay = &quot;counts&quot;, peakMatrix = PeakMatrix, peak_assay = &quot;counts&quot;, clusters = GeneExpressionMatrix$label, method = &quot;corr&quot;, tf_re.merge = TRUE) ## adding weights using corr... ## calculating average expression across clusters... ## computing weights... 4.11 Calculate TF activity Finally, the activities for a specific TF in each cell are computed by averaging the weighted expressions of target genes linked to the TF. \\[y=\\frac{1}{n}\\sum_{i=1}^{n} x_i * weight_i\\] where \\(y\\) is the activity of a TF for a cell \\(n\\) is the total number of targets for a TF \\(x_i\\) is the log count expression of target i where i in {1,2,…,n} \\(weight_i\\) is the weight of TF and target i We calculate three different activities corresponding to the different weighted regulons score.combine.wilcox &lt;- calculateActivity(expMatrix = GeneExpressionMatrix, exp_assay = &quot;counts&quot;, regulon = regulon.w.wilcox, normalize = TRUE, mode = &quot;weight&quot;, method = &quot;weightedMean&quot;) ## calculating TF activity from regulon using weightedmean ## Warning in calculateActivity(expMatrix = GeneExpressionMatrix, exp_assay = &quot;counts&quot;, : The weight column contains multiple subcolumns ## but no cluster information was provided. Using first column to compute activity... ## aggregating regulons... ## creating weight matrix... ## calculating activity scores... ## normalize by mean... ## normalize by the number of targets... score.combine.corr &lt;- calculateActivity(expMatrix = GeneExpressionMatrix, exp_assay = &quot;counts&quot;, regulon = regulon.w.corr, normalize = TRUE, mode = &quot;weight&quot;, method = &quot;weightedMean&quot;) ## calculating TF activity from regulon using weightedmean ## aggregating regulons... ## creating weight matrix... ## calculating activity scores... ## normalize by mean... ## normalize by the number of targets... score.combine.corr.re &lt;- calculateActivity(expMatrix = GeneExpressionMatrix, exp_assay = &quot;counts&quot;, regulon = regulon.w.corr.re, normalize = TRUE, mode = &quot;weight&quot;, method = &quot;weightedMean&quot;) ## calculating TF activity from regulon using weightedmean ## aggregating regulons... ## creating weight matrix... ## calculating activity scores... ## normalize by mean... ## normalize by the number of targets... We visualize the different activities side by side. library(epiregulon.extra) plotActivityViolin(activity_matrix = score.combine.wilcox, tf = c( &quot;AR&quot;), clusters = GeneExpressionMatrix$label) + ggtitle (&quot;AR activity by wilcoxon&quot;) plotActivityViolin(activity_matrix = score.combine.corr, tf = c( &quot;AR&quot;), clusters = GeneExpressionMatrix$label) + ggtitle (&quot;AR activity by corr TF vs TG&quot;) plotActivityViolin(activity_matrix = score.combine.corr.re, tf = c( &quot;AR&quot;), clusters = GeneExpressionMatrix$label) + ggtitle (&quot;AR activity by corr TF*RE vs TG&quot;) In this case, activity calculated from correlation based on TF and TG expression is clearly wrong because we see increased AR activity after Enzalutamide treatment despite it being an AR antagonist. Therefore, for drug treatment which often decouples TF gene expression and its activity, it is important to take into consideration both TF gene expression and RE chromatin accessibility; the latter may be a better indicator of TF function if the TF has an effect on the chromatin accessibility. In this case, the recommended methods are either wilcox or corr with tf_re.merge = TRUE. The astute users could however detect a difference in the prediction of the AR activity in the resistant clones “RES-A” and “RES-B” with respect to the parental “LNCaP” between the two methods. For example, the corr with tf_re.merge = TRUE shows increased AR activity in “RES-B” compared to “LNCaP” because “RES-B” shows increased AR expression. In contrast, the wilcoxon method did not predict an increase in AR activity in “RES-B” because “RES-B” still shows reduced chromatin accessibility compared to “LNCaP”. Since wilcoxon takes into account the co-occurrence of both TF gene expression and RE chromatin accessibility, this method does not predict an overall increase in AR activity. In the absence of the ground truth, it is difficult to judge which method is superior. Therefore, it is always crucial to validate key findings with additional empirical evidence. The most important disclaimer we wish to make is that all predictions by epiregulon should be robustly tested experimentally. 4.12 Perform differential activity For the remaining steps, we continue with activity derived from the wilcoxon method. markers &lt;- findDifferentialActivity(activity_matrix = score.combine.wilcox, clusters = GeneExpressionMatrix$label, pval.type = &quot;some&quot;, direction = &quot;up&quot;, test.type = &quot;t&quot;) Take the top differential TFs markers.sig &lt;- getSigGenes(markers, topgenes = 5 ) ## Using a logFC cutoff of 0 for class LNCaP ## Using a logFC cutoff of 0 for class LNCaP–ENZ48 ## Using a logFC cutoff of 0 for class LNCaP RES-A ## Using a logFC cutoff of 0 for class LNCaP RES-B 4.13 Visualize the results First visualize the known differential TFs by bubble plot plotBubble(activity_matrix = score.combine.wilcox, tf = c(&quot;AR&quot;,&quot;FOXA1&quot;, &quot;MYC&quot;,&quot;JUN&quot;), clusters = GeneExpressionMatrix$label) Then visualize the most differential TFs by clusters plotBubble(activity_matrix = score.combine.wilcox, tf = markers.sig$tf, clusters = GeneExpressionMatrix$label) Visualize the known differential TFs by UMAP plotActivityDim(sce = GeneExpressionMatrix, activity_matrix = score.combine.wilcox, tf = c( &quot;AR&quot;, &quot;FOXA1&quot;, &quot;MYC&quot;, &quot;JUN&quot;), dimtype = &quot;UMAP_Combined&quot;, label = &quot;label&quot;, point_size = 1, ncol = 2, nrow = 2) Visualize the newly discovered differential TFs by UMAP plotActivityDim(sce = GeneExpressionMatrix, activity_matrix = score.combine.wilcox, tf = c(&quot;SPDEF&quot;,&quot;HES4&quot;,&quot;ATF5&quot;,&quot;NR2F2&quot;), dimtype = &quot;UMAP_Combined&quot;, label = &quot;label&quot;, point_size = 1, ncol = 2, nrow = 2) Visualize regulons by heatmap rowData(GeneExpressionMatrix) &lt;- NULL plotHeatmapRegulon(sce=GeneExpressionMatrix, tfs= c( &quot;AR&quot;, &quot;FOXA1&quot;, &quot;MYC&quot;, &quot;JUN&quot;), regulon=regulon.w.wilcox, regulon_cutoff=0.1, downsample=1000, cell_attributes=&quot;label&quot;, col_gap=&quot;label&quot;, exprs_values=&quot;counts&quot;, name=&quot;regulon heatmap&quot;, column_title_rot = 45) plotHeatmapActivity(activity=score.combine.wilcox, sce=GeneExpressionMatrix, tfs=rownames(score.combine.wilcox), downsample=1000, cell_attributes=&quot;label&quot;, col_gap=&quot;label&quot;, name = &quot;transcription factor activity&quot;, column_title_rot = 45) ## Geneset enrichment Sometimes we are interested to know what pathways are enriched in the regulon of a particular TF. We can perform geneset enrichment using the enricher function from clusterProfiler. #retrieve genesets H &lt;- EnrichmentBrowser::getGenesets(org = &quot;hsa&quot;, db = &quot;msigdb&quot;, cat = &quot;H&quot;, gene.id.type = &quot;SYMBOL&quot;, cache = FALSE) C6 &lt;- EnrichmentBrowser::getGenesets(org = &quot;hsa&quot;, db = &quot;msigdb&quot;, cat = &quot;C6&quot;, gene.id.type = &quot;SYMBOL&quot;, cache = FALSE) #combine genesets and convert genesets to be compatible with enricher gs &lt;- c(H,C6) gs.list &lt;- do.call(rbind,lapply(names(gs), function(x) {data.frame(gs=x, genes=gs[[x]])})) enrichresults &lt;- regulonEnrich(TF = c(&quot;AR&quot;, &quot;FOXA1&quot;, &quot;MYC&quot;, &quot;JUN&quot;), regulon = regulon.w.wilcox, weight = &quot;weight&quot;, weight_cutoff = 0, genesets = gs.list) ## AR ## FOXA1 ## MYC ## JUN #plot results enrichPlot(results = enrichresults, ncol = 2) We can visualize the genesets of known factors as a network plotGseaNetwork(tf = names(enrichresults), enrichresults = enrichresults, p.adj_cutoff = 0.1, ntop_pathways = 10) We can visualize the genesets of differential factors as a network enrichresults &lt;- regulonEnrich(TF = markers.sig$tf, regulon = regulon.w.wilcox, weight = &quot;weight&quot;, weight_cutoff = 0, genesets = gs.list) ## HES4 ## SPDEF ## FOXP1 ## NKX3-1 ## NFIB ## HES4 ## NFIB ## SPDEF ## NFYB ## CEBPG ## ATF5 ## BPTF ## SREBF1 ## REST ## JUN ## JUN ## NR2F2 ## SMARCC1 ## NR2F6 ## ATF5 plotGseaNetwork(tf = names(enrichresults), enrichresults = enrichresults, p.adj_cutoff = 0.1, ntop_pathways = 10) 4.14 Differential network analysis In addition to looking at the summed TF activity, a second approach to investigate differential TF activity is to compare and contrast target genes or network topology. In this example, we know that AR is downregulated in the Enzalutamide treated cells compared to parental LNCaP. plotDiffNetwork(regulon.w.wilcox, cutoff = 0, tf = c(&quot;AR&quot;), weight = &quot;weight&quot;, clusters = c(&quot;LNCaP&quot;,&quot;LNCaP–ENZ48&quot;), layout = &quot;stress&quot;) ## Building graph using weight as edge weights We perform edge subtracted graph between two conditions and rank TFs by degree centrality. In this example, positive centrality indicates higher activity in parental LNCaP and negative centrality indicates higher activity in Enzalutamide treated cells. # construct a graph of the parental and enzalutamide treated cells respectively LNCaP_network &lt;- buildGraph(regulon.w.wilcox, weights = &quot;weight&quot;, cluster=&quot;LNCaP&quot;) ## Building graph using weight as edge weights ENZ_network &lt;- buildGraph(regulon.w.wilcox, weights = &quot;weight&quot;, cluster=&quot;LNCaP–ENZ48&quot;) ## Building graph using weight as edge weights # construct a difference graph diff_graph &lt;- buildDiffGraph(LNCaP_network, ENZ_network, abs_diff = FALSE) diff_graph &lt;- addCentrality(diff_graph) diff_graph &lt;- normalizeCentrality(diff_graph) rank_table &lt;- rankTfs(diff_graph) library(ggplot2) ggplot(rank_table, aes(x = rank, y = centrality)) + geom_point() + ggrepel::geom_text_repel(data = rbind(head(rank_table,5), tail(rank_table,5)), aes(label = tf), nudge_x = 0, nudge_y = 0, box.padding = 0.5) + theme_classic() + ggtitle (&quot;differential TFs (LNCaP-ENZ) ranked by degree centrality&quot;) Sometimes, we are interested to identify interaction partners of the TFs of interest. This can be achieved by comparing the overlap of the targets genes for all the TFs and identify the most similar TFs by Jaccard similarity. To illustrate this function, we take a look at the top most similar 20 TFs to AR. library(igraph) diff_graph_filter &lt;- subgraph.edges(diff_graph, E(diff_graph)[E(diff_graph)$weight&gt;0], del=TRUE) # compute a similarity matrix of all TFs similarity_score &lt;- calculateJaccardSimilarity(diff_graph_filter) # Focus on AR similarity_score_AR &lt;- similarity_score[, &quot;AR&quot;] similarity_df &lt;- data.frame(similarity = head(sort(similarity_score_AR, decreasing = TRUE),20), TF = names(head(sort(similarity_score_AR, decreasing = TRUE),20))) similarity_df$TF &lt;- factor(similarity_df$TF, levels = rev(unique(similarity_df$TF))) # plot top TFs most similar to SPI1 topTFplot &lt;- ggplot(similarity_df, aes(x=TF, y=similarity)) + geom_bar(stat=&quot;identity&quot;) + coord_flip() + ggtitle(&quot;AR similarity&quot;) + theme_classic() print(topTFplot) In order to convince ourselves that our differential network is statistically significant, we permute the edges and obtain a background graph from averaging many iterations. Here, we plot the differential network graph subtracted by permuted graphs. # create a permuted graph by rewiring the edges 100 times permute_matrix &lt;- permuteGraph(diff_graph_filter, &quot;AR&quot;, 100, p=1) permute_matrix &lt;- permute_matrix[names(similarity_score_AR),] diff_matrix &lt;- similarity_score_AR-rowMeans(permute_matrix) diff_matrix_df &lt;- data.frame(similarity = head(sort(diff_matrix, decreasing = TRUE),20), TF = names(head(sort(diff_matrix, decreasing = TRUE),20))) diff_matrix_df$TF &lt;- factor(diff_matrix_df$TF, levels = rev(unique(diff_matrix_df$TF))) # plot top TFs most similar to AR topTFplot &lt;- ggplot(diff_matrix_df, aes(x=TF, y=similarity)) + geom_bar(stat=&quot;identity&quot;) + coord_flip() + ggtitle(&quot;background subtracted AR similarity &quot;) + theme_classic() print(topTFplot) # obtain empirical p-values p_matrix &lt;- rowMeans(apply(permute_matrix, 2, function(x) {x &gt; similarity_score_AR})) p_matrix[names(head(sort(diff_matrix,decreasing = TRUE),20))] ## JUND MYC HOXB13 FOXA1 NFIC CEBPB XBP1 MAZ ATF4 CTCF REST GATA2 ETV1 FOXP1 CEBPG JUN YY1 NFIB ZNF148 ## 0.00 0.00 0.00 0.01 0.03 0.01 0.00 0.03 0.01 0.00 0.01 0.01 0.03 0.01 0.01 0.03 0.00 0.00 0.00 ## USF2 ## 0.01 4.15 Session Info sessionInfo() ## R Under development (unstable) (2023-12-04 r85659) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 18.04.6 LTS ## ## Matrix products: default ## BLAS: /usr/local/lib/R/lib/libRblas.so ## LAPACK: /usr/local/lib/R/lib/libRlapack.so; LAPACK version 3.11.0 ## ## Random number generation: ## RNG: L&#39;Ecuyer-CMRG ## Normal: Inversion ## Sample: Rejection ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## time zone: Etc/UTC ## tzcode source: system (glibc) ## ## attached base packages: ## [1] parallel grid stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] nabor_0.5.0 epiregulon.archr_0.99.1 rhdf5_2.47.4 ## [4] RcppArmadillo_0.12.8.0.0 Rcpp_1.0.12 Matrix_1.6-4 ## [7] sparseMatrixStats_1.15.0 data.table_1.15.0 stringr_1.5.1 ## [10] plyr_1.8.9 magrittr_2.0.3 gtable_0.3.4 ## [13] gtools_3.9.5 gridExtra_2.3 devtools_2.4.5 ## [16] usethis_2.2.3 ArchR_1.0.3 igraph_2.0.2 ## [19] ggplot2_3.4.4 org.Hs.eg.db_3.18.0 AnnotationDbi_1.65.2 ## [22] msigdbr_7.5.1 epiregulon.extra_0.99.1 BSgenome.Hsapiens.UCSC.hg38_1.4.5 ## [25] BSgenome_1.71.2 rtracklayer_1.63.0 BiocIO_1.13.0 ## [28] Biostrings_2.71.2 XVector_0.43.1 epiregulon_0.99.2 ## [31] scMultiome_1.3.0 SingleCellExperiment_1.25.0 MultiAssayExperiment_1.29.1 ## [34] SummarizedExperiment_1.33.3 Biobase_2.63.0 GenomicRanges_1.55.3 ## [37] GenomeInfoDb_1.39.6 IRanges_2.37.1 S4Vectors_0.41.3 ## [40] MatrixGenerics_1.15.0 matrixStats_1.2.0 ExperimentHub_2.11.1 ## [43] AnnotationHub_3.11.1 BiocFileCache_2.11.1 dbplyr_2.4.0 ## [46] BiocGenerics_0.49.1 ## ## loaded via a namespace (and not attached): ## [1] fs_1.6.3 bitops_1.0-7 enrichplot_1.23.1 DirichletMultinomial_1.45.0 ## [5] TFBSTools_1.41.0 HDO.db_0.99.1 httr_1.4.7 RColorBrewer_1.1-3 ## [9] doParallel_1.0.17 Rgraphviz_2.47.0 profvis_0.3.8 tools_4.4.0 ## [13] backports_1.4.1 utf8_1.2.4 R6_2.5.1 HDF5Array_1.31.5 ## [17] lazyeval_0.2.2 rhdf5filters_1.15.2 GetoptLong_1.0.5 urlchecker_1.0.1 ## [21] withr_3.0.0 cli_3.6.2 Cairo_1.6-2 scatterpie_0.2.1 ## [25] labeling_0.4.3 sass_0.4.8 KEGGgraph_1.63.0 readr_2.1.5 ## [29] Rsamtools_2.19.3 yulab.utils_0.1.4 gson_0.1.0 DOSE_3.29.2 ## [33] R.utils_2.12.3 scater_1.31.2 sessioninfo_1.2.2 limma_3.59.3 ## [37] rstudioapi_0.15.0 RSQLite_2.3.5 gridGraphics_0.5-1 generics_0.1.3 ## [41] shape_1.4.6 dplyr_1.1.4 GO.db_3.18.0 ggbeeswarm_0.7.2 ## [45] fansi_1.0.6 abind_1.4-5 R.methodsS3_1.8.2 lifecycle_1.0.4 ## [49] yaml_2.3.8 edgeR_4.1.17 qvalue_2.35.0 SparseArray_1.3.4 ## [53] blob_1.2.4 promises_1.2.1 dqrng_0.3.2 crayon_1.5.2 ## [57] miniUI_0.1.1.1 lattice_0.22-5 beachmat_2.19.1 cowplot_1.1.3 ## [61] annotate_1.81.2 KEGGREST_1.43.0 magick_2.8.3 pillar_1.9.0 ## [65] knitr_1.45 ComplexHeatmap_2.19.0 metapod_1.11.1 fgsea_1.29.0 ## [69] rjson_0.2.21 codetools_0.2-19 fastmatch_1.1-4 glue_1.7.0 ## [73] ggfun_0.1.4 remotes_2.4.2.1 treeio_1.27.0 vctrs_0.6.5 ## [77] png_0.1-8 poweRlaw_0.80.0 cachem_1.0.8 xfun_0.42 ## [81] S4Arrays_1.3.3 mime_0.12 tidygraph_1.3.1 pracma_2.4.4 ## [85] iterators_1.0.14 statmod_1.5.0 bluster_1.13.0 ellipsis_0.3.2 ## [89] nlme_3.1-164 ggtree_3.11.0 bit64_4.0.5 filelock_1.0.3 ## [93] bslib_0.6.1 irlba_2.3.5.1 vipor_0.4.7 colorspace_2.1-0 ## [97] seqLogo_1.69.0 DBI_1.2.2 ggrastr_1.0.2 tidyselect_1.2.0 ## [101] bit_4.0.5 compiler_4.4.0 curl_5.2.0 graph_1.81.0 ## [105] BiocNeighbors_1.21.2 DelayedArray_0.29.4 shadowtext_0.1.3 bookdown_0.37 ## [109] checkmate_2.3.1 scales_1.3.0 caTools_1.18.2 rappdirs_0.3.3 ## [113] digest_0.6.34 motifmatchr_1.25.0 rmarkdown_2.25 htmltools_0.5.7 ## [117] pkgconfig_2.0.3 highr_0.10 fastmap_1.1.1 htmlwidgets_1.6.4 ## [121] rlang_1.1.3 GlobalOptions_0.1.2 shiny_1.8.0 DelayedMatrixStats_1.25.1 ## [125] farver_2.1.1 jquerylib_0.1.4 jsonlite_1.8.8 BiocParallel_1.37.0 ## [129] GOSemSim_2.29.1 R.oo_1.26.0 BiocSingular_1.19.0 RCurl_1.98-1.14 ## [133] ggplotify_0.1.2 scuttle_1.13.0 GenomeInfoDbData_1.2.11 patchwork_1.2.0 ## [137] Rhdf5lib_1.25.1 munsell_0.5.0 ape_5.7-1 babelgene_22.9 ## [141] viridis_0.6.5 EnrichmentBrowser_2.33.1 stringi_1.8.3 ggraph_2.1.0 ## [145] MASS_7.3-60.1 zlibbioc_1.49.0 pkgbuild_1.4.3 ggrepel_0.9.5 ## [149] CNEr_1.39.0 graphlayouts_1.1.0 splines_4.4.0 hms_1.1.3 ## [153] circlize_0.4.16 locfit_1.5-9.8 pkgload_1.3.4 reshape2_1.4.4 ## [157] ScaledMatrix_1.11.0 TFMPvalue_0.0.9 BiocVersion_3.19.1 XML_3.99-0.16.1 ## [161] evaluate_0.23 scran_1.31.0 BiocManager_1.30.22 httpuv_1.6.14 ## [165] tweenr_2.0.2 tzdb_0.4.0 foreach_1.5.2 polyclip_1.10-6 ## [169] tidyr_1.3.1 purrr_1.0.2 clue_0.3-65 ggforce_0.4.2 ## [173] rsvd_1.0.5 xtable_1.8-4 restfulr_0.0.15 tidytree_0.4.6 ## [177] later_1.3.2 viridisLite_0.4.2 tibble_3.2.1 aplot_0.2.2 ## [181] clusterProfiler_4.11.0 memoise_2.0.1 beeswarm_0.4.0 GenomicAlignments_1.39.4 ## [185] cluster_2.1.6 GSEABase_1.65.1 BiocStyle_2.31.0 "],["single-modality-scrna-seq-only.html", "5 Single modality: scRNA-seq only 5.1 Load regulon 5.2 Load scRNA-seq data 5.3 Calculate activity 5.4 Perform differential activity 5.5 Visualize activity 5.6 Pathway enrichment 5.7 Session Info", " 5 Single modality: scRNA-seq only Epiregulon also supports transcription factor activity inference when users only have scRNA-seq. After all, multiome or scATAC-seq data is still relatively rare. To enable TF activity inference on scRNA-seq, users can supply a pre-constructed gene regulatory network. Dorothea provides both human and mouse pre-constructed gene regulatory networks based on curated experimental and computational data. In this vignette, we bypass the regulon construction step and go straight to calculate TF activity from a Dorothea GRN. 5.1 Load regulon Dorothea assigns confidence level to its regulons with A being the most confident (i.e. supported by multiple lines of evidence) and E being the least confident. library(dorothea) data(dorothea_mm, package = &quot;dorothea&quot;) regulon &lt;- dorothea_mm #known tfs genes_to_plot &lt;- c(&quot;Foxa1&quot;, &quot;Neurod1&quot;,&quot;Pdx1&quot;,&quot;Arx&quot;) 5.2 Load scRNA-seq data We download the raw counts of a mouse pancreas data set from scRNAseq. We add normalized logcounts, perform dimension reduction and visualize the embeddings using scater. library(scRNAseq) library(scater) sce &lt;- BaronPancreasData(&#39;mouse&#39;) sce &lt;- logNormCounts(sce) sce &lt;- runPCA(sce) sce &lt;- runUMAP(sce) plotUMAP(sce, colour_by = &quot;label&quot;, text_by = &quot;label&quot;) 5.3 Calculate activity Even though Dorothea provides weights under the mor column, we can achieve superior performance if we recompute the weights based on the correlation between tf and target gene expression based on our own data. We performed 2 steps, the first step is to add weights to the Dorothea regulons and the second step is to estimate the TF activity by taking the weighted average of the target gene expression. library(epiregulon) #Add weights to regulon. Default method (wilcoxon) cannot be used regulon.ms &lt;- addWeights(regulon = regulon, expMatrix = sce, clusters = sce$label, BPPARAM = BiocParallel::MulticoreParam(), method=&quot;corr&quot;) #Calculate activity score.combine &lt;- calculateActivity(sce, regulon = regulon.ms, mode = &quot;weight&quot;, method = &quot;weightedMean&quot;) 5.4 Perform differential activity library(epiregulon.extra) markers &lt;- findDifferentialActivity(activity_matrix = score.combine, clusters = sce$label, pval.type = &quot;some&quot;, direction = &quot;up&quot;, test.type = &quot;t&quot;) Take the top TFs markers.sig &lt;- getSigGenes(markers, topgenes = 5 ) 5.5 Visualize activity Finally we visualize the TF activity by either UMAP, violin plots or bubble plots. We confirm the activity of known lineage factors Pdx1 and Neurod1 in beta cells, Arx in alpha cells and Foxa1 in ductal cells. # plot umap plotActivityDim(sce = sce, activity_matrix = score.combine, tf = genes_to_plot, legend.label = &quot;score&quot;, point_size = 0.1, dimtype = &quot;UMAP&quot;, label = &quot;label&quot;, combine = TRUE, text_size = 2) # plot violin plot plotActivityViolin(score.combine, tf = genes_to_plot, clusters = sce$label) # plot bubble plot plotBubble(score.combine, tf = genes_to_plot, clusters = sce$label) Plot bubble plot of differential TFs plotBubble(score.combine, tf = markers.sig$tf, clusters = sce$label) We can adapt the epiregulon package to plot gene expression. When compared against TF activity, gene expression of Foxa1 and Arx has noisy signals and high dropout rates. Epiregulon enhances the signal to noise ratio of TF activity and better resolves lineage differences. # plot umap plotActivityDim(sce = sce, activity_matrix = logcounts(sce), tf = genes_to_plot, legend.label = &quot;gex&quot;, point_size = 0.1, dimtype = &quot;UMAP&quot;, label = &quot;label&quot;, combine = TRUE, text_size = 2, colors = c(&quot;gray&quot;,&quot;blue&quot;), limit = c(0,2)) # plot violin plot plotActivityViolin(logcounts(sce), tf = genes_to_plot, clusters = sce$label, legend.label = &quot;gex&quot;) # plot Bubble plot plotBubble(logcounts(sce), tf = markers.sig$tf, clusters = sce$label, legend.label = &quot;gex&quot;) We can visualize the target genes for transcription factors of interest plotHeatmapRegulon(sce=sce, tfs=genes_to_plot, regulon=regulon.ms, regulon_cutoff=0.5, downsample=1000, cell_attributes=&quot;label&quot;, col_gap=&quot;label&quot;, exprs_values=&quot;logcounts&quot;, name=&quot;regulon heatmap&quot;, column_title_rot = 45) plotHeatmapActivity(activity_matrix = score.combine, sce=sce, tfs=genes_to_plot, downsample=1000, cell_attributes=&quot;label&quot;, col_gap=&quot;label&quot;, name=&quot;regulon heatmap&quot;, column_title_rot = 45) 5.6 Pathway enrichment Sometimes it is useful to understand what pathways are enriched in the regulons. We take the highly correlated target genes of a regulon and perform geneset enrichment using the enricher function from clusterProfiler. #retrieve genesets H &lt;- EnrichmentBrowser::getGenesets(org = &quot;mmu&quot;, db = &quot;msigdb&quot;, cat = &quot;H&quot;, gene.id.type = &quot;SYMBOL&quot;, cache = FALSE) C6 &lt;- EnrichmentBrowser::getGenesets(org = &quot;mmu&quot;, db = &quot;msigdb&quot;, cat = &quot;C6&quot;, gene.id.type = &quot;SYMBOL&quot;, cache = FALSE) #combine genesets and convert genesets to be compatible with enricher gs &lt;- c(H,C6) gs.list &lt;- do.call(rbind,lapply(names(gs), function(x) {data.frame(gs = x, genes = gs[[x]])})) enrichresults &lt;- regulonEnrich(genes_to_plot, regulon = regulon.ms, weight = &quot;weight&quot;, weight_cutoff = 0.5, genesets = gs.list) ## Foxa1 ## Neurod1 ## Pdx1 ## Arx #plot results enrichPlot(results = enrichresults, ncol = 1) 5.7 Session Info sessionInfo() ## R Under development (unstable) (2023-12-04 r85659) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 18.04.6 LTS ## ## Matrix products: default ## BLAS: /usr/local/lib/R/lib/libRblas.so ## LAPACK: /usr/local/lib/R/lib/libRlapack.so; LAPACK version 3.11.0 ## ## Random number generation: ## RNG: L&#39;Ecuyer-CMRG ## Normal: Inversion ## Sample: Rejection ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## time zone: Etc/UTC ## tzcode source: system (glibc) ## ## attached base packages: ## [1] parallel grid stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] org.Mm.eg.db_3.18.0 scater_1.31.2 scuttle_1.13.0 ## [4] scRNAseq_2.17.0 dorothea_1.15.0 nabor_0.5.0 ## [7] epiregulon.archr_0.99.1 rhdf5_2.47.4 RcppArmadillo_0.12.8.0.0 ## [10] Rcpp_1.0.12 Matrix_1.6-4 sparseMatrixStats_1.15.0 ## [13] data.table_1.15.0 stringr_1.5.1 plyr_1.8.9 ## [16] magrittr_2.0.3 gtable_0.3.4 gtools_3.9.5 ## [19] gridExtra_2.3 devtools_2.4.5 usethis_2.2.3 ## [22] ArchR_1.0.3 igraph_2.0.2 ggplot2_3.4.4 ## [25] org.Hs.eg.db_3.18.0 AnnotationDbi_1.65.2 msigdbr_7.5.1 ## [28] epiregulon.extra_0.99.1 BSgenome.Hsapiens.UCSC.hg38_1.4.5 BSgenome_1.71.2 ## [31] rtracklayer_1.63.0 BiocIO_1.13.0 Biostrings_2.71.2 ## [34] XVector_0.43.1 epiregulon_0.99.2 scMultiome_1.3.0 ## [37] SingleCellExperiment_1.25.0 MultiAssayExperiment_1.29.1 SummarizedExperiment_1.33.3 ## [40] Biobase_2.63.0 GenomicRanges_1.55.3 GenomeInfoDb_1.39.6 ## [43] IRanges_2.37.1 S4Vectors_0.41.3 MatrixGenerics_1.15.0 ## [46] matrixStats_1.2.0 ExperimentHub_2.11.1 AnnotationHub_3.11.1 ## [49] BiocFileCache_2.11.1 dbplyr_2.4.0 BiocGenerics_0.49.1 ## ## loaded via a namespace (and not attached): ## [1] R.methodsS3_1.8.2 GSEABase_1.65.1 progress_1.2.3 urlchecker_1.0.1 ## [5] poweRlaw_0.80.0 HDF5Array_1.31.5 vctrs_0.6.5 digest_0.6.34 ## [9] png_0.1-8 shape_1.4.6 ggrepel_0.9.5 bcellViper_1.39.0 ## [13] magick_2.8.3 MASS_7.3-60.1 reshape2_1.4.4 foreach_1.5.2 ## [17] httpuv_1.6.14 qvalue_2.35.0 withr_3.0.0 ggrastr_1.0.2 ## [21] xfun_0.42 ggfun_0.1.4 ellipsis_0.3.2 memoise_2.0.1 ## [25] ggbeeswarm_0.7.2 clusterProfiler_4.11.0 gson_0.1.0 profvis_0.3.8 ## [29] tidytree_0.4.6 GlobalOptions_0.1.2 KEGGgraph_1.63.0 R.oo_1.26.0 ## [33] prettyunits_1.2.0 KEGGREST_1.43.0 promises_1.2.1 httr_1.4.7 ## [37] restfulr_0.0.15 rhdf5filters_1.15.2 rstudioapi_0.15.0 miniUI_0.1.1.1 ## [41] generics_0.1.3 DOSE_3.29.2 babelgene_22.9 curl_5.2.0 ## [45] zlibbioc_1.49.0 ScaledMatrix_1.11.0 ggraph_2.1.0 polyclip_1.10-6 ## [49] GenomeInfoDbData_1.2.11 SparseArray_1.3.4 xtable_1.8-4 pracma_2.4.4 ## [53] doParallel_1.0.17 evaluate_0.23 S4Arrays_1.3.3 hms_1.1.3 ## [57] bookdown_0.37 irlba_2.3.5.1 colorspace_2.1-0 filelock_1.0.3 ## [61] readr_2.1.5 Rgraphviz_2.47.0 later_1.3.2 viridis_0.6.5 ## [65] ggtree_3.11.0 lattice_0.22-5 XML_3.99-0.16.1 shadowtext_0.1.3 ## [69] cowplot_1.1.3 pillar_1.9.0 nlme_3.1-164 iterators_1.0.14 ## [73] caTools_1.18.2 compiler_4.4.0 beachmat_2.19.1 stringi_1.8.3 ## [77] GenomicAlignments_1.39.4 crayon_1.5.2 abind_1.4-5 gridGraphics_0.5-1 ## [81] locfit_1.5-9.8 graphlayouts_1.1.0 bit_4.0.5 dplyr_1.1.4 ## [85] fastmatch_1.1-4 codetools_0.2-19 BiocSingular_1.19.0 bslib_0.6.1 ## [89] GetoptLong_1.0.5 mime_0.12 splines_4.4.0 circlize_0.4.16 ## [93] HDO.db_0.99.1 EnrichmentBrowser_2.33.1 knitr_1.45 blob_1.2.4 ## [97] utf8_1.2.4 clue_0.3-65 BiocVersion_3.19.1 seqLogo_1.69.0 ## [101] AnnotationFilter_1.27.0 fs_1.6.3 checkmate_2.3.1 DelayedMatrixStats_1.25.1 ## [105] pkgbuild_1.4.3 ggplotify_0.1.2 tibble_3.2.1 statmod_1.5.0 ## [109] tzdb_0.4.0 tweenr_2.0.2 pkgconfig_2.0.3 tools_4.4.0 ## [113] cachem_1.0.8 RSQLite_2.3.5 viridisLite_0.4.2 DBI_1.2.2 ## [117] fastmap_1.1.1 rmarkdown_2.25 scales_1.3.0 Rsamtools_2.19.3 ## [121] sass_0.4.8 FNN_1.1.4 patchwork_1.2.0 BiocManager_1.30.22 ## [125] graph_1.81.0 farver_2.1.1 tidygraph_1.3.1 scatterpie_0.2.1 ## [129] yaml_2.3.8 cli_3.6.2 purrr_1.0.2 motifmatchr_1.25.0 ## [133] lifecycle_1.0.4 uwot_0.1.16 bluster_1.13.0 sessioninfo_1.2.2 ## [137] backports_1.4.1 BiocParallel_1.37.0 annotate_1.81.2 rjson_0.2.21 ## [141] ape_5.7-1 limma_3.59.3 jsonlite_1.8.8 edgeR_4.1.17 ## [145] TFBSTools_1.41.0 bitops_1.0-7 bit64_4.0.5 yulab.utils_0.1.4 ## [149] BiocNeighbors_1.21.2 CNEr_1.39.0 jquerylib_0.1.4 highr_0.10 ## [153] metapod_1.11.1 GOSemSim_2.29.1 dqrng_0.3.2 R.utils_2.12.3 ## [157] lazyeval_0.2.2 shiny_1.8.0 htmltools_0.5.7 enrichplot_1.23.1 ## [161] GO.db_3.18.0 rappdirs_0.3.3 ensembldb_2.27.1 glue_1.7.0 ## [165] TFMPvalue_0.0.9 httr2_1.0.0 RCurl_1.98-1.14 treeio_1.27.0 ## [169] scran_1.31.0 R6_2.5.1 tidyr_1.3.1 labeling_0.4.3 ## [173] GenomicFeatures_1.55.3 cluster_2.1.6 pkgload_1.3.4 Rhdf5lib_1.25.1 ## [177] aplot_0.2.2 DirichletMultinomial_1.45.0 ProtGenerics_1.35.2 DelayedArray_0.29.4 ## [181] tidyselect_1.2.0 vipor_0.4.7 xml2_1.3.6 ggforce_0.4.2 ## [185] rsvd_1.0.5 munsell_0.5.0 BiocStyle_2.31.0 htmlwidgets_1.6.4 ## [189] fgsea_1.29.0 ComplexHeatmap_2.19.0 RColorBrewer_1.1-3 biomaRt_2.59.1 ## [193] rlang_1.1.3 remotes_2.4.2.1 fansi_1.0.6 Cairo_1.6-2 ## [197] beeswarm_0.4.0 "],["contact.html", "6 Contact", " 6 Contact The issues related to epiregulon suite of packages can be reported on the package GitHub repository page. epiregulon epiregulon.extra epiregulon.archr If you need more information on the package usage you can contact authors directly: Xiaosai Yao, yaox19@gene.com Tomasz Włodarczy, tomwlo@gmail.com "]]
