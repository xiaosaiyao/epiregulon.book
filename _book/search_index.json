[["single-modality-gene-expression.html", "Chapter 5 Single modality: gene expression 5.1 Load regulon 5.2 Load scRNA-seq data 5.3 Calculate activity 5.4 Perform differential activity 5.5 Visualize activity 5.6 Session Info", " Chapter 5 Single modality: gene expression Epiregulon also supports transcription factor activity inference when users only have scRNA-seq. After all, multiome or scATAC-seq data is still relatively rare. To enable TF activity inference on scRNA-seq, users can supply a pre-constructed gene regulatory network. Dorothea provides both human and mouse pre-constructed gene regulatory networks based on curated experimental and computational data. In this vignette, we bypass the regulon construction step and go straight to calculate TF activity from a Dorothea GRN. 5.1 Load regulon Dorothea assigns confidence level to its regulons with A being the most confident (i.e. supported by multiple lines of evidence) and E being the least confident. library(dorothea) data(dorothea_mm, package = &quot;dorothea&quot;) regulon &lt;- dorothea_mm #known tfs genes_to_plot &lt;- c(&quot;Foxa1&quot;, &quot;Neurod1&quot;,&quot;Pdx1&quot;,&quot;Arx&quot;) 5.2 Load scRNA-seq data We download the raw counts of a mouse pancreas data set from scRNAseq. We add normalized logcounts, perform dimension reduction and visualize the embeddings using scater. library(scRNAseq) library(scater) sce &lt;- BaronPancreasData(&#39;mouse&#39;) sce &lt;- logNormCounts(sce) sce &lt;- runPCA(sce) sce &lt;- runUMAP(sce) plotUMAP(sce, colour_by = &quot;label&quot;, text_by = &quot;label&quot;) 5.3 Calculate activity Even though Dorothea provides weights under the mor column, we achieved superior performance if we recompute the weights based on the correlation between tf and target gene expression based on our own data. We performed 2 steps, the first step is to add weights to the Dorothea regulons and the second step is to estimate the TF activity by taking the weighted average of the target gene expression. library(epiregulon) #Add weights to regulon regulon.ms &lt;- addWeights(regulon = regulon, expMatrix = sce, clusters = sce$label, BPPARAM = BiocParallel::MulticoreParam()) #Calculate activity score.combine &lt;- calculateActivity(sce, regulon = regulon.ms, mode = &quot;weight&quot;, method = &quot;weightedMean&quot;) 5.4 Perform differential activity markers &lt;- findDifferentialActivity(activity_matrix = score.combine, groups = sce$label, pval.type = &quot;some&quot;, direction = &quot;up&quot;, test.type = &quot;t&quot;) ## Warning: The `groups` argument of `findDifferentialActivity()` is deprecated as of ## epiregulon 1.0.0. ## ℹ Please use the `clusters` argument instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. Take the top TFs markers.sig &lt;- getSigGenes(markers, topgenes = 5 ) ## Using a logFC cutoff of 0.1 for class B_cell ## Using a logFC cutoff of 0.1 for class T_cell ## Using a logFC cutoff of 0.1 for class activated_stellate ## Using a logFC cutoff of 0.1 for class alpha ## Using a logFC cutoff of 0.1 for class beta ## Using a logFC cutoff of 0.1 for class delta ## Using a logFC cutoff of 0.1 for class ductal ## Using a logFC cutoff of 0.1 for class endothelial ## Using a logFC cutoff of 0.1 for class gamma ## Using a logFC cutoff of 0.1 for class immune_other ## Using a logFC cutoff of 0.1 for class macrophage ## Using a logFC cutoff of 0.1 for class quiescent_stellate ## Using a logFC cutoff of 0.1 for class schwann 5.5 Visualize activity Finally we visualize the TF activity by either UMAP, violin plots or bubble plots. We confirm the activity of known lineage factors Pdx1 and Neurod1 in beta cells, Arx in alpha cells and Foxa1 in ductal cells. # plot umap plotActivityDim(sce = sce, activity_matrix = score.combine, tf = genes_to_plot, legend.label = &quot;score&quot;, point_size = 0.1, dimtype = &quot;UMAP&quot;, label = &quot;label&quot;, combine = TRUE, text_size = 2) # plot violin plot plotActivityViolin(score.combine, tf = genes_to_plot, clusters = sce$label) # plot bubble plot plotBubble(score.combine, tf = genes_to_plot, clusters = sce$label) Plot bubble plot of differential TFs plotBubble(score.combine, tf = markers.sig$tf, clusters = sce$label) We can adapt the epiregulon package to plot gene expression. When compared against TF activity, gene expression of Foxa1 and Arx has noisy signals and high dropout rates. Epiregulon enhances the signal to noise ratio of TF activity and better resolves lineage differences. # plot umap plotActivityDim(sce = sce, activity_matrix = logcounts(sce), tf = genes_to_plot, legend.label = &quot;score&quot;, point_size = 0.1, dimtype = &quot;UMAP&quot;, label = &quot;label&quot;, combine = TRUE, text_size = 2, colors = c(&quot;gray&quot;,&quot;blue&quot;), limit = c(0,2)) # plot violin plot plotActivityViolin(logcounts(sce), tf = genes_to_plot, clusters = sce$label) # plot Bubble plot plotBubble(logcounts(sce), tf = markers.sig$tf, clusters = sce$label) We can visualize the target genes for transcription factors of interest plotHeatmapRegulon(sce=sce, tfs=genes_to_plot, regulon=regulon.ms, regulon_cutoff=0.5, downsample=1000, cell_attributes=&quot;label&quot;, col_gap=&quot;label&quot;, exprs_values=&quot;logcounts&quot;, name=&quot;regulon heatmap&quot;, column_title_rot = 45) plotHeatmapActivity(activity_matrix = score.combine, sce=sce, tfs=genes_to_plot, downsample=1000, cell_attributes=&quot;label&quot;, col_gap=&quot;label&quot;, name=&quot;regulon heatmap&quot;, column_title_rot = 45) ## Pathway enrichment Sometimes it is useful to understand what pathways are enriched in the regulons. We take the highly correlated target genes of a regulon and perform geneset enrichment using the enricher function from clusterProfiler. #retrieve genesets H &lt;- EnrichmentBrowser::getGenesets(org = &quot;mmu&quot;, db = &quot;msigdb&quot;, cat = &quot;H&quot;, gene.id.type = &quot;SYMBOL&quot;, cache = FALSE) C6 &lt;- EnrichmentBrowser::getGenesets(org = &quot;mmu&quot;, db = &quot;msigdb&quot;, cat = &quot;C6&quot;, gene.id.type = &quot;SYMBOL&quot;, cache = FALSE) #combine genesets and convert genesets to be compatible with enricher gs &lt;- c(H,C6) gs.list &lt;- do.call(rbind,lapply(names(gs), function(x) {data.frame(gs = x, genes = gs[[x]])})) enrichresults &lt;- regulonEnrich(genes_to_plot, regulon = regulon.ms, weight = &quot;weight&quot;, weight_cutoff = 0.5, genesets = gs.list) ## Foxa1 ## ## Neurod1 ## Pdx1 ## Arx #plot results enrichPlot(results = enrichresults, ncol = 1) 5.6 Session Info sessionInfo() ## R version 4.3.0 (2023-04-21) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 18.04.6 LTS ## ## Matrix products: default ## BLAS: /usr/local/lib/R/lib/libRblas.so ## LAPACK: /usr/local/lib/R/lib/libRlapack.so; LAPACK version 3.11.0 ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=C ## [4] LC_COLLATE=C LC_MONETARY=C LC_MESSAGES=C ## [7] LC_PAPER=C LC_NAME=C LC_ADDRESS=C ## [10] LC_TELEPHONE=C LC_MEASUREMENT=C LC_IDENTIFICATION=C ## ## time zone: Etc/UTC ## tzcode source: system (glibc) ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages: ## [1] org.Mm.eg.db_3.18.0 AnnotationDbi_1.63.2 ## [3] msigdbr_7.5.1 epiregulon_1.0.35 ## [5] Matrix_1.6-1.1 scater_1.29.4 ## [7] ggplot2_3.4.4 scuttle_1.11.3 ## [9] scRNAseq_2.15.0 SingleCellExperiment_1.23.0 ## [11] SummarizedExperiment_1.31.1 Biobase_2.61.0 ## [13] GenomicRanges_1.53.3 GenomeInfoDb_1.37.7 ## [15] IRanges_2.35.3 S4Vectors_0.39.3 ## [17] BiocGenerics_0.47.1 MatrixGenerics_1.13.2 ## [19] matrixStats_1.0.0 dorothea_1.13.0 ## ## loaded via a namespace (and not attached): ## [1] fs_1.6.2 ProtGenerics_1.33.1 ## [3] GSVA_1.49.8 bitops_1.0-7 ## [5] enrichplot_1.21.3 HDO.db_0.99.1 ## [7] httr_1.4.6 RColorBrewer_1.1-3 ## [9] doParallel_1.0.17 Rgraphviz_2.45.0 ## [11] tools_4.3.0 backports_1.4.1 ## [13] utf8_1.2.3 R6_2.5.1 ## [15] HDF5Array_1.29.3 lazyeval_0.2.2 ## [17] uwot_0.1.16 rhdf5filters_1.13.5 ## [19] GetoptLong_1.0.5 withr_2.5.0 ## [21] prettyunits_1.1.1 gridExtra_2.3 ## [23] cli_3.6.1 Cairo_1.6-1 ## [25] scatterpie_0.2.1 labeling_0.4.3 ## [27] sass_0.4.6 KEGGgraph_1.61.0 ## [29] yulab.utils_0.1.0 Rsamtools_2.17.0 ## [31] gson_0.1.0 DOSE_3.27.3 ## [33] bcellViper_1.37.0 BSgenome_1.69.1 ## [35] limma_3.57.11 rstudioapi_0.15.0 ## [37] RSQLite_2.3.1 FNN_1.1.3.2 ## [39] gridGraphics_0.5-1 generics_0.1.3 ## [41] shape_1.4.6 BiocIO_1.11.0 ## [43] dplyr_1.1.3 GO.db_3.18.0 ## [45] ggbeeswarm_0.7.2 fansi_1.0.4 ## [47] abind_1.4-5 lifecycle_1.0.3 ## [49] yaml_2.3.7 edgeR_3.99.6 ## [51] qvalue_2.33.0 rhdf5_2.45.1 ## [53] SparseArray_1.1.12 BiocFileCache_2.9.1 ## [55] grid_4.3.0 blob_1.2.4 ## [57] promises_1.2.0.1 dqrng_0.3.1 ## [59] ExperimentHub_2.9.1 crayon_1.5.2 ## [61] lattice_0.22-5 beachmat_2.17.17 ## [63] cowplot_1.1.1 GenomicFeatures_1.53.3 ## [65] annotate_1.79.0 KEGGREST_1.41.4 ## [67] magick_2.8.1 pillar_1.9.0 ## [69] knitr_1.44 ComplexHeatmap_2.17.0 ## [71] metapod_1.9.0 fgsea_1.27.1 ## [73] rjson_0.2.21 codetools_0.2-19 ## [75] fastmatch_1.1-4 glue_1.6.2 ## [77] ggfun_0.1.3 data.table_1.14.8 ## [79] MultiAssayExperiment_1.27.5 treeio_1.25.4 ## [81] vctrs_0.6.3 png_0.1-8 ## [83] gtable_0.3.4 cachem_1.0.8 ## [85] xfun_0.39 S4Arrays_1.1.6 ## [87] mime_0.12 tidygraph_1.2.3 ## [89] iterators_1.0.14 statmod_1.5.0 ## [91] bluster_1.11.4 interactiveDisplayBase_1.39.0 ## [93] ellipsis_0.3.2 nlme_3.1-163 ## [95] ArchR_1.0.3 ggtree_3.9.1 ## [97] bit64_4.0.5 progress_1.2.2 ## [99] filelock_1.0.2 bslib_0.5.1 ## [101] irlba_2.3.5.1 vipor_0.4.5 ## [103] colorspace_2.1-0 DBI_1.1.3 ## [105] tidyselect_1.2.0 bit_4.0.5 ## [107] compiler_4.3.0 curl_5.0.0 ## [109] graph_1.79.4 BiocNeighbors_1.19.0 ## [111] BSgenome.Mmusculus.UCSC.mm10_1.4.3 xml2_1.3.5 ## [113] DelayedArray_0.27.10 shadowtext_0.1.2 ## [115] bookdown_0.36 rtracklayer_1.61.2 ## [117] checkmate_2.2.0 scales_1.2.1 ## [119] rappdirs_0.3.3 stringr_1.5.0 ## [121] digest_0.6.31 rmarkdown_2.25 ## [123] BSgenome.Hsapiens.UCSC.hg19_1.4.3 XVector_0.41.2 ## [125] htmltools_0.5.5 pkgconfig_2.0.3 ## [127] sparseMatrixStats_1.13.4 dbplyr_2.3.4 ## [129] fastmap_1.1.1 ensembldb_2.25.1 ## [131] rlang_1.1.1 GlobalOptions_0.1.2 ## [133] shiny_1.7.5.1 DelayedMatrixStats_1.23.9 ## [135] farver_2.1.1 jquerylib_0.1.4 ## [137] jsonlite_1.8.7 BiocParallel_1.35.4 ## [139] GOSemSim_2.27.3 BiocSingular_1.17.1 ## [141] RCurl_1.98-1.12 magrittr_2.0.3 ## [143] ggplotify_0.1.2 GenomeInfoDbData_1.2.11 ## [145] patchwork_1.1.3 Rhdf5lib_1.23.2 ## [147] munsell_0.5.0 Rcpp_1.0.11 ## [149] ape_5.7-1 babelgene_22.9 ## [151] viridis_0.6.4 EnrichmentBrowser_2.31.5 ## [153] stringi_1.7.12 ggraph_2.1.0 ## [155] MASS_7.3-60 zlibbioc_1.47.0 ## [157] AnnotationHub_3.9.2 plyr_1.8.9 ## [159] HPO.db_0.99.2 parallel_4.3.0 ## [161] ggrepel_0.9.4 graphlayouts_1.0.1 ## [163] splines_4.3.0 Biostrings_2.69.2 ## [165] hms_1.1.3 circlize_0.4.15 ## [167] locfit_1.5-9.8 BSgenome.Hsapiens.UCSC.hg38_1.4.5 ## [169] igraph_1.5.1 reshape2_1.4.4 ## [171] biomaRt_2.57.1 ScaledMatrix_1.9.1 ## [173] BiocVersion_3.18.0 XML_3.99-0.14 ## [175] evaluate_0.21 scran_1.29.3 ## [177] BiocManager_1.30.22 tweenr_2.0.2 ## [179] foreach_1.5.2 httpuv_1.6.11 ## [181] polyclip_1.10-6 tidyr_1.3.0 ## [183] purrr_1.0.2 clue_0.3-65 ## [185] ggforce_0.4.1 rsvd_1.0.5 ## [187] xtable_1.8-4 restfulr_0.0.15 ## [189] AnnotationFilter_1.25.0 tidytree_0.4.5 ## [191] MPO.db_0.99.7 later_1.3.1 ## [193] viridisLite_0.4.2 tibble_3.2.1 ## [195] aplot_0.2.2 clusterProfiler_4.9.5 ## [197] memoise_2.0.1 beeswarm_0.4.0 ## [199] GenomicAlignments_1.37.0 cluster_2.1.4 ## [201] GSEABase_1.63.0 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
